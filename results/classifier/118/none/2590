device: 0.101
graphic: 0.092
debug: 0.037
permissions: 0.033
semantic: 0.030
PID: 0.030
ppc: 0.022
register: 0.016
architecture: 0.016
vnc: 0.013
socket: 0.013
x86: 0.012
performance: 0.011
boot: 0.010
network: 0.007
risc-v: 0.007
arm: 0.007
peripherals: 0.007
kernel: 0.006
assembly: 0.006
user-level: 0.006
virtual: 0.005
mistranslation: 0.005
TCG: 0.004
VMM: 0.003
hypervisor: 0.003
files: 0.003
i386: 0.002
KVM: 0.001

qemu-x86_64: gdb doesn't read symbols from dynamically linked shared libraries.
Description of problem:
GDB fails to load dynamically linked shared libraries when connecting to qemu-x86_64, causing it to not recognize symbols from the shared libraries. As a result, breakpoints in shared library functions (e.g, `break printf`) do not work.
Steps to reproduce:
1. Start the debug server: `./qemu-x86_64 -g PORT ./x86_64-binary`
2. Connect GDB to the debug server:
```
$ gdb-multiarch ./x86_64-binary
(gdb) set verbose on
(gdb) target remote :PORT
```
3. GDB displays a warning and fails to load shared libraries:
```
(gdb) target remote :PORT
Remote debugging using :PORT
warning: platform-specific solib_create_inferior_hook did not load initial shared libraries.
(gdb) info sharedlibrary
No shared libraries loaded at this time.
```
Additional information:
This issue does not occur when using gdbserver on a native x86_64 machine and connecting to it from gdb-multiarch on an ARM64 machine, indicating the issue is likely related to QEMU rather than GDB. 

GDB correctly recognizes symbols from the target binary (e.g., the `main` function), and breakpoints at these symbols function as expected.
