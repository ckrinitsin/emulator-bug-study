performance: 0.730
graphic: 0.698
register: 0.697
architecture: 0.676
semantic: 0.656
device: 0.651
peripherals: 0.608
arm: 0.583
user-level: 0.525
kernel: 0.521
socket: 0.512
boot: 0.506
mistranslation: 0.453
debug: 0.439
PID: 0.428
network: 0.389
permissions: 0.329
hypervisor: 0.290
VMM: 0.262
assembly: 0.253
x86: 0.250
risc-v: 0.245
vnc: 0.240
files: 0.235
TCG: 0.224
i386: 0.219
ppc: 0.218
KVM: 0.173
virtual: 0.080

sd_init() generates SIGSEGV when passed NULL

Ran into a bug following the following tutorial:
http://balau82.wordpress.com/2010/03/10/u-boot-for-arm-on-qemu/ 

I built QEMU from a clone of master and became stuck at the beginning part of the tutorial where only u-boot.bin is exectuted.

http://git.qemu.org/?p=qemu.git;a=commitdiff;h=4f8a066b5fc254eeaabbbde56ba4f5b29cc68fdf 
See the modifications to sd.c specifically. 

When sd_init (sd.c) is called from pl181_init(), bs is potentially null:
s->card = sd_init(dinfo ? dinfo->bdrv : NULL, false); 

sd_init()  :
SDState *sd_init(BlockDriverState *bs, bool is_spi) 
{ 
    SDState *sd; 
 
    sd = (SDState *) g_malloc0(sizeof(SDState)); 
    sd->buf = qemu_blockalign(bs, 512); 
    sd->spi = is_spi; 
    sd->enable = true; 
    sd_reset(sd, bs); 
    if (sd->bdrv) { 
        bdrv_attach_dev_nofail(sd->bdrv, sd); 
        bdrv_set_dev_ops(sd->bdrv, &sd_block_ops, sd); 
    } 
    vmstate_register(NULL, -1, &sd_vmstate, sd); 
    return sd; 
}

Line 497 calls bdrv_is_read_only(bs) (from block.c)and this generates a SEGSIGV.

int bdrv_is_read_only(BlockDriverState *bs)                                                           
{                                                                                                     
    return bs->read_only;                                                                             
} 

Checking out tag v1.6.1 reverted the problem.  Thanks!

Fixed with commit 794cbc26eb94ce13c75d105eea9ff0afff56e2c2.

