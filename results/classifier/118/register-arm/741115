arm: 0.935
debug: 0.917
register: 0.901
architecture: 0.881
graphic: 0.850
device: 0.823
user-level: 0.739
performance: 0.736
peripherals: 0.716
network: 0.654
mistranslation: 0.639
permissions: 0.634
semantic: 0.609
socket: 0.565
risc-v: 0.547
vnc: 0.501
boot: 0.469
ppc: 0.465
kernel: 0.449
files: 0.426
TCG: 0.345
PID: 0.334
VMM: 0.328
KVM: 0.225
hypervisor: 0.215
virtual: 0.199
assembly: 0.161
i386: 0.069
x86: 0.043
--------------------
arm: 0.993
debug: 0.921
register: 0.804
TCG: 0.039
assembly: 0.024
virtual: 0.016
files: 0.016
architecture: 0.010
device: 0.010
network: 0.007
PID: 0.007
risc-v: 0.005
hypervisor: 0.004
semantic: 0.004
peripherals: 0.004
kernel: 0.004
user-level: 0.003
boot: 0.003
permissions: 0.003
performance: 0.003
graphic: 0.001
socket: 0.001
ppc: 0.001
x86: 0.001
i386: 0.001
vnc: 0.000
VMM: 0.000
KVM: 0.000
mistranslation: 0.000

Add support of coprocessor cp15, cp14 registers exposion in the embedded gdb server

Please add support of exposion of ARM coprocesor registers/logic at the embedded gdb server,
 for example of cp15, cp14, etc registers.

Related project http://jtagarmgdbsrvr.sourceforge.net/index.html

Also filled bug in the GDB http://sourceware.org/bugzilla/show_bug.cgi?id=12602

Since QEMU 3.0 the QEMU gdb stub supports read-only access to most cp14/cp15 registers. The gdb 'info all-registers' command will print all the registers (integer, fp and system registers), or individual registers can be read with commands like "print /x $SCTLR".

Write access isn't supported (that is a lot trickier to do in a reliable way since QEMU's internals make assumptions that system registers can only be changed in the ways that the guest validly can, and there's no easy API to connect to the debug stub that would allow the user to change system registers in only safe ways).


