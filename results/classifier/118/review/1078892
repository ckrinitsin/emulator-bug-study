architecture: 0.883
device: 0.781
virtual: 0.720
boot: 0.714
graphic: 0.701
register: 0.653
vnc: 0.544
semantic: 0.510
ppc: 0.506
VMM: 0.497
hypervisor: 0.471
x86: 0.468
risc-v: 0.456
kernel: 0.440
files: 0.395
mistranslation: 0.376
network: 0.376
i386: 0.364
socket: 0.350
performance: 0.290
TCG: 0.290
permissions: 0.287
peripherals: 0.258
PID: 0.253
arm: 0.246
debug: 0.231
user-level: 0.216
KVM: 0.114
assembly: 0.107
--------------------
x86: 0.917
debug: 0.751
virtual: 0.744
user-level: 0.615
i386: 0.571
architecture: 0.294
TCG: 0.222
hypervisor: 0.219
register: 0.152
boot: 0.141
PID: 0.047
performance: 0.033
kernel: 0.018
files: 0.015
ppc: 0.015
device: 0.014
assembly: 0.014
network: 0.009
risc-v: 0.009
semantic: 0.007
socket: 0.005
peripherals: 0.002
VMM: 0.002
vnc: 0.002
permissions: 0.001
arm: 0.001
graphic: 0.001
KVM: 0.000
mistranslation: 0.000

qemu doesn't general protection fault if there are reserved bits set in page-directory-pointer table entries

While working on implementing 32-bit PAE mode in a custom operating system, which I was testing in QEMU, I noticed that my OS worked correctly, but resulted in a general protection fault when booted on VMware, VirtualBox, or bochs.

According to the Intel Architecture Manual, Volume 3A, Section 4.4.1 "PDPTE Registers", "If any of the PDPTEs sets both the P flag (bit 0) and any reserved bit, the MOV to CR instruction causes a general-protection exception (#GP(0)) and the PDPTEs are not loaded." QEMU does not emulate this behavior.

Triaging old bug tickets ... can you still reproduce this issue with the
latest version of QEMU (version 2.9)?

[Expired for QEMU because there has been no activity for 60 days.]

