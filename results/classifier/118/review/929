x86: 0.929
architecture: 0.911
user-level: 0.868
PID: 0.850
graphic: 0.770
performance: 0.692
device: 0.680
semantic: 0.663
ppc: 0.623
network: 0.521
arm: 0.519
vnc: 0.482
socket: 0.465
mistranslation: 0.434
files: 0.412
permissions: 0.404
debug: 0.390
kernel: 0.376
boot: 0.362
TCG: 0.328
risc-v: 0.309
i386: 0.256
VMM: 0.246
peripherals: 0.233
assembly: 0.210
register: 0.192
virtual: 0.178
hypervisor: 0.159
KVM: 0.077
--------------------
user-level: 0.831
virtual: 0.680
x86: 0.624
debug: 0.170
hypervisor: 0.127
files: 0.108
kernel: 0.044
TCG: 0.042
PID: 0.020
performance: 0.012
risc-v: 0.008
architecture: 0.008
register: 0.008
semantic: 0.007
ppc: 0.004
network: 0.003
assembly: 0.003
VMM: 0.003
device: 0.003
i386: 0.002
boot: 0.001
peripherals: 0.001
graphic: 0.001
socket: 0.001
permissions: 0.001
arm: 0.001
KVM: 0.000
mistranslation: 0.000
vnc: 0.000

qemu-user syscall clone fails
Description of problem:
This seems very similar to the issue reported here (https://bugs.launchpad.net/qemu/+bug/1926996). When attempting to perform the clone syscall, an error of -1 is returned where I would expect it to succeed. Running the same executable outside of qemu works as expected.
Steps to reproduce:
1. gcc clone.c
2. qemu-x86_64 a.out
Additional information:
I've tried building with gcc, zig cc, and clang and the output of each works fine when running natively, but running under qemu fails. I originally discovered it when cross compiling to riscv64 but it doesn't seem to be limited to that architecture.

```
// clone.c

#include <linux/sched.h>
#include <sched.h>
#include <sys/syscall.h>
#include <unistd.h>
#include <stdio.h>

int main(void) {

  long pid = syscall( SYS_clone, 0, 0, 0, 0, 0 );

  if (pid < 0) {
    printf( "error %ld\n", pid );
  } else if (pid == 0) {
    printf( "child %ld\n", pid );
  } else {
    printf( "parent %ld\n", pid );
  }

  return 0;
}
```
