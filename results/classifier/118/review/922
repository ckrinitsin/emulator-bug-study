architecture: 0.877
graphic: 0.796
device: 0.756
arm: 0.697
ppc: 0.678
semantic: 0.572
x86: 0.571
performance: 0.543
register: 0.529
permissions: 0.506
debug: 0.486
vnc: 0.475
TCG: 0.444
risc-v: 0.387
PID: 0.343
virtual: 0.293
files: 0.288
VMM: 0.283
boot: 0.282
user-level: 0.260
hypervisor: 0.195
socket: 0.147
network: 0.145
mistranslation: 0.128
assembly: 0.079
kernel: 0.053
peripherals: 0.051
KVM: 0.016
i386: 0.005
--------------------
arm: 0.898
user-level: 0.753
debug: 0.611
hypervisor: 0.452
virtual: 0.374
register: 0.094
TCG: 0.090
PID: 0.058
files: 0.052
performance: 0.039
x86: 0.010
device: 0.008
kernel: 0.007
network: 0.006
semantic: 0.005
ppc: 0.004
assembly: 0.004
architecture: 0.003
peripherals: 0.003
graphic: 0.003
socket: 0.002
boot: 0.001
vnc: 0.001
risc-v: 0.001
i386: 0.001
permissions: 0.001
VMM: 0.000
mistranslation: 0.000
KVM: 0.000

QEMU 7.0.0-rc0: Random segfaults when running grep using qemu-arm-static
Description of problem:
I'm running ARM binaries using 32 bit qemu-arm-static on x86_64 host. Sometimes when running grep via qemu, I get a random segmentation fault. Sometimes it happens faster, sometimes it takes several thousand iterations, but sooner or later it happens and really annoying.

This problem is also reproduced on 6.2, 5.2 and 5.1 releases, and NOT reproduced on 5.0

I wrote small test to demonstrate this bug.
Steps to reproduce:
1. Download the test environment: [qemu-test-segfault.tar.bz2](/uploads/8f52617d46ba1e5bf29fc273cd07131d/qemu-test-segfault.tar.bz2)
2. `$ make # To build the docker container`
3. `$ make shell # To run ARM bash`
4. Inside a container, run `while true; do /qemu /bin/grep -E f text > /dev/null; [ $? -ne 0 ] && break; done`. After a while you will get segfault:
```
[root@0d81b08f032b /]# /qemu --version
qemu-arm version 6.2.90
Copyright (c) 2003-2022 Fabrice Bellard and the QEMU Project developers
[root@0d81b08f032b /]# while true; do /qemu /bin/grep -E f text > /dev/null; [ $? -ne 0 ] && break; done
Segmentation fault (core dumped)
[root@0d81b08f032b /]#
```
