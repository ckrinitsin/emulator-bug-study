mistranslation: 0.912
device: 0.683
semantic: 0.661
vnc: 0.627
ppc: 0.606
graphic: 0.596
network: 0.587
performance: 0.583
peripherals: 0.528
register: 0.527
socket: 0.506
architecture: 0.433
virtual: 0.412
hypervisor: 0.393
files: 0.358
kernel: 0.337
risc-v: 0.330
arm: 0.328
VMM: 0.327
debug: 0.326
permissions: 0.324
user-level: 0.293
PID: 0.264
TCG: 0.262
i386: 0.255
x86: 0.245
assembly: 0.211
boot: 0.190
KVM: 0.163
--------------------
virtual: 0.428
mistranslation: 0.158
debug: 0.152
hypervisor: 0.096
TCG: 0.055
user-level: 0.020
files: 0.014
register: 0.012
network: 0.011
device: 0.008
socket: 0.008
ppc: 0.008
i386: 0.008
x86: 0.006
PID: 0.005
semantic: 0.005
kernel: 0.004
performance: 0.003
graphic: 0.002
peripherals: 0.002
VMM: 0.002
architecture: 0.002
assembly: 0.002
KVM: 0.001
vnc: 0.001
arm: 0.001
permissions: 0.001
risc-v: 0.001
boot: 0.001

QEMU wrongly translates newlines on serial output

When using "-serial stdio", QEMU shows the guest serial port's output on the tty running qemu. As it should, QEMU sets the tty to raw mode. Or almost... Strangely, it neglects to remove one output-translation bit, ONLCR (see termios(3)) enabled on the tty. And it should have removed this output translation!

The problem is that with this ONLCR, the guest has no way of outputting a bare linefeed ('\n') - every time the guest tries to output a bare linefeed to the serial port, the host tty will translate it to \r\n which will be sent to the underlying terminal (e.g., xterm).

In most cases, this issue doesn't cause a problem: When the guest is running a Unix-like operating system which is itself in cooked mode, the guest itself will always output \r\n, and the hosts second translation (to \r\r\n) does no harm. But in certain cases, the guest can *really* want to output just \n, and have this \n reach the terminal emulator and do what a linefeed is supposed to do without a carriage-return - namely - just go one line down in the same column.

As an illustration of this bug, consider a guest running a Unix-like operating system running a curses-based application (e.g., "vi"). If you look at the output of "infocmp xterm", you'll notice that cud1=^J. This means that if the curses library decides to move one line down (it can happen in some cursor movement situations) it might decide to print a linefeed (\n) to move one line down. The guest's operating system will not mess with this linefeed (because the guest is in raw mode), but then qemu's tty, because it was wrongly left in ONLCR mode, will change this \n to \r\n before it reaches the terminal - causing wrong cursor movement (instead the cursor going straight down, it moves to the first column of the next line).

I think this bug relates to:
https://bugs.launchpad.net/qemu/+bug/1715296

Patch has now been committed here:
https://git.qemu.org/?p=qemu.git;a=commitdiff;h=12fb0ac0575df83cec72ec

