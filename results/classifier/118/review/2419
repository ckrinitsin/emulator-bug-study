architecture: 0.860
arm: 0.781
device: 0.662
graphic: 0.619
semantic: 0.503
mistranslation: 0.492
performance: 0.403
permissions: 0.337
ppc: 0.297
network: 0.294
vnc: 0.286
socket: 0.282
register: 0.251
files: 0.234
boot: 0.232
PID: 0.223
peripherals: 0.186
risc-v: 0.174
user-level: 0.168
assembly: 0.166
kernel: 0.158
debug: 0.154
VMM: 0.130
hypervisor: 0.112
virtual: 0.104
i386: 0.103
x86: 0.100
TCG: 0.098
KVM: 0.040
--------------------
arm: 0.995
assembly: 0.530
debug: 0.210
files: 0.180
TCG: 0.112
architecture: 0.107
semantic: 0.083
hypervisor: 0.067
virtual: 0.038
register: 0.023
kernel: 0.022
PID: 0.014
VMM: 0.010
device: 0.010
user-level: 0.008
network: 0.005
performance: 0.005
risc-v: 0.003
boot: 0.003
peripherals: 0.003
socket: 0.003
mistranslation: 0.002
graphic: 0.002
KVM: 0.001
vnc: 0.001
permissions: 0.001
ppc: 0.000
i386: 0.000
x86: 0.000

ldapr_stlr_i instructions doesn't consider signed offset
Description of problem:
The format ldapr_stlr_i models the load acquire / store release immediate instructions. \
These instructions has a bug in the sign extension calculation of the imm field. \
imm should be defined as s9 instead of 9.

@ldapr_stlr_i   .. ...... .. . imm:9 .. rn:5 rt:5 &ldapr_stlr_i

Should be changed to:

@ldapr_stlr_i   .. ...... .. . imm:s9 .. rn:5 rt:5 &ldapr_stlr_i
Steps to reproduce:
1. Run ARM target
2. Generate any ldapr_stlr_i instructions (for example: LDAPUR)
3. When the imm value is negative, the immediate calculation is done wrong. In case the calculation leads to an undefined location, QEMU will fail.
Additional information:
In trans_LDAPR_i (translate-a64.c), when imm field is negative, the value of a->imm will be 512-x instead of x. \
I already fixed the issue by adding the s9 to the imm field. This made a call to sextend32 for imm instead of extend32 in the generated file build/libqemu-aarch64-softmmu.fa.p/decode-a64.c.inc
