user-level: 0.926
graphic: 0.848
performance: 0.841
device: 0.788
mistranslation: 0.696
arm: 0.669
architecture: 0.594
boot: 0.572
permissions: 0.561
files: 0.554
semantic: 0.545
network: 0.477
PID: 0.476
ppc: 0.472
TCG: 0.470
risc-v: 0.467
debug: 0.452
vnc: 0.424
i386: 0.417
socket: 0.411
x86: 0.379
kernel: 0.361
VMM: 0.319
register: 0.313
peripherals: 0.310
KVM: 0.215
virtual: 0.190
hypervisor: 0.172
assembly: 0.105
--------------------
arm: 0.998
user-level: 0.817
TCG: 0.420
debug: 0.330
virtual: 0.323
VMM: 0.031
files: 0.018
PID: 0.014
register: 0.013
semantic: 0.012
architecture: 0.008
boot: 0.007
device: 0.005
performance: 0.005
assembly: 0.004
network: 0.004
mistranslation: 0.002
permissions: 0.002
hypervisor: 0.002
peripherals: 0.002
socket: 0.001
graphic: 0.001
kernel: 0.001
risc-v: 0.001
vnc: 0.001
KVM: 0.001
x86: 0.000
ppc: 0.000
i386: 0.000

user space emulation: openat() seems to defeat sysroot path translation
Description of problem:
It appears that the user space emulation code is doing some path manipulation of some syscalls to sometimes prefix them with the sysroot.  This seems to be interacting badly sometimes with certain usage patterns.  This was noticed because a test suite of various libc calls was failing under `qemu-arm`, and a `strace` of the qemu-arm process revealed that the translated paths were being inconsistently applied.

In particular, the sequence which fails is:
* create a file in `/tmp/`.
* open `/tmp` itself.  This succeeds, but `strace` reveals that it actually opened `SYSROOT/tmp/`.
* `openat(tmpfd, tmpfile_name)` then fails, as the fd provided to openat is actually inside the sysroot, not at `/tmp` as expected.
Steps to reproduce:
1. Get toolchain https://toolchains.bootlin.com/downloads/releases/toolchains/armv7-eabihf/tarballs/armv7-eabihf--uclibc--bleeding-edge-2021.11-1.tar.bz2
2. Compile attached test program [test_openat.c](/uploads/69eb997256ff29d2178be85531c6b3c6/test_openat.c)
3. Try to run under `qemu-arm`.

This code passes in non-emulated situations, but fails under user-space emulation.  Presumably it would also pass under full system emulation.
