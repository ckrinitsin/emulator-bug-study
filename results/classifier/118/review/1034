architecture: 0.884
semantic: 0.805
performance: 0.737
graphic: 0.658
user-level: 0.601
ppc: 0.571
device: 0.564
arm: 0.497
permissions: 0.479
mistranslation: 0.410
register: 0.408
PID: 0.357
network: 0.323
boot: 0.322
socket: 0.317
debug: 0.295
peripherals: 0.289
risc-v: 0.289
vnc: 0.235
assembly: 0.214
files: 0.205
hypervisor: 0.160
KVM: 0.157
kernel: 0.153
TCG: 0.145
VMM: 0.133
x86: 0.131
virtual: 0.099
i386: 0.092
--------------------
virtual: 0.735
debug: 0.579
user-level: 0.119
architecture: 0.041
hypervisor: 0.038
semantic: 0.028
performance: 0.020
kernel: 0.018
files: 0.009
permissions: 0.007
PID: 0.006
TCG: 0.005
network: 0.005
register: 0.004
arm: 0.003
ppc: 0.002
assembly: 0.002
device: 0.002
risc-v: 0.001
socket: 0.001
boot: 0.001
peripherals: 0.001
vnc: 0.001
mistranslation: 0.001
VMM: 0.001
x86: 0.000
graphic: 0.000
i386: 0.000
KVM: 0.000

Erlang/OTP 25 JIT on AArch64 fails in user mode emulation
Description of problem:
Compiling Erlang/OTP 25 fails with segfault when using user mode (but works in system mode), the Erlang devs have tracked it down in [ErlangForums](https://erlangforums.com/t/otp-25-0-rc3-release-candidate-3-is-released/1317/24) and give this explanation:

> Thanks, I’ve found a bug in QEMU that explains this. The gist of it is:
> 
> Instead of interpreting guest code, QEMU dynamically translates it to the host architecture. When the guest overwrites code for one reason or another, the translation is invalidated and redone if needed.
> 
> Our JIT:ed code is mapped in two regions to work in the face of W^X restrictions: one executable but not writable, and one writable but not executable. Both of these regions point to the same physical memory and writes to the writable region are “magically” reflected in the executable one.
> 
> I would’ve expected QEMU to honor the IC IVAU / ISB instructions we use to tell the processor that we’ve altered code at a particular address, but for some reason QEMU just ignores them 3 and relies entirely on trapping writes to previously translated code.
> 
> In system mode QEMU emulates the MMU and sees that these two regions point at the same memory, and has no problem invalidating the executable region after writing to the writable region.
> 
> In user mode it instead calls mprotect(..., PROT_READ) on all code regions it has translated, and invalidates translations in the signal handler. The problem is that we never write to the executable region – just the writable one – so the code doesn’t get invalidated.

There doesn't seem to a open or closed QEMU bug that actually describes this problem.
