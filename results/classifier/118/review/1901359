mistranslation: 0.969
device: 0.790
graphic: 0.762
semantic: 0.752
register: 0.745
ppc: 0.732
performance: 0.708
architecture: 0.692
hypervisor: 0.691
PID: 0.666
network: 0.658
peripherals: 0.653
user-level: 0.647
kernel: 0.644
vnc: 0.633
files: 0.630
permissions: 0.603
risc-v: 0.593
debug: 0.570
socket: 0.564
arm: 0.540
TCG: 0.507
x86: 0.498
i386: 0.481
VMM: 0.454
assembly: 0.441
KVM: 0.412
boot: 0.412
virtual: 0.396
--------------------
x86: 0.093
debug: 0.070
TCG: 0.007
virtual: 0.006
files: 0.005
PID: 0.005
register: 0.005
hypervisor: 0.004
user-level: 0.004
ppc: 0.004
semantic: 0.004
arm: 0.003
network: 0.003
device: 0.003
i386: 0.003
VMM: 0.003
boot: 0.003
risc-v: 0.003
socket: 0.003
vnc: 0.003
peripherals: 0.002
mistranslation: 0.002
performance: 0.002
kernel: 0.002
assembly: 0.002
permissions: 0.002
graphic: 0.001
architecture: 0.001
KVM: 0.000

ignore bit 0 in pci CONFIG_ADDRESS register write for Type 1 access

I'v recently stumbled upon a bug in the Plan9 PCI config space access routines for config mode #1.

The code used to set bit 0 in the CONFIG_ADDRESS register for a Type 1 access.

This was most likely a misreading of the PCI local bus specification on our side.

However, in the PCI local bus specification 3.0, it states the following:

> 3.2.2.3.2 Software Generation of Configuration Transactions
> ...
> For Type 1 translations, the host bridge directly copies the contents of the
> CONFIG_ADDRESS register (excluding bits 31 and 0) onto the PCI AD lines during the
> address phase of a configuration transaction making sure that AD[1::0] is "01".

note the: "excluding bits 31 and 0"

What happens in qemu instead is that it uses bit 0 of the CONFIG_ADDRESS
register as part of the register offset (when it probably should ignore it)
when translating from Type 1 to Type 0 address. So once it reaches the device
behind the bridge the register address is off by one.

is anybody home?

Yeah, the bug tracker here on Launchpad is somewhat neglected ... Therefore:
The QEMU project is currently moving its bug tracking to another system.
For this we need to know which bugs are still valid and which could be
closed already. Thus we are setting the bug state to "Incomplete" now.

If the bug has already been fixed in the latest upstream version of QEMU,
then please close this ticket as "Fix released".

If it is not fixed yet and you think that this bug report here is still
valid, then you have two options:

1) If you already have an account on gitlab.com, please open a new ticket
for this problem in our new tracker here:

    https://gitlab.com/qemu-project/qemu/-/issues

and then close this ticket here on Launchpad (or let it expire auto-
matically after 60 days). Please mention the URL of this bug ticket on
Launchpad in the new ticket on GitLab.

2) If you don't have an account on gitlab.com and don't intend to get
one, but still would like to keep this ticket opened, then please switch
the state back to "New" or "Confirmed" within the next 60 days (other-
wise it will get closed as "Expired"). We will then eventually migrate
the ticket automatically to the new system (but you won't be the reporter
of the bug in the new system and thus you won't get notified on changes
anymore).

Thank you and sorry for the inconvenience.


[Expired for QEMU because there has been no activity for 60 days.]

