arm: 0.953
architecture: 0.951
peripherals: 0.914
register: 0.853
debug: 0.842
permissions: 0.817
assembly: 0.806
performance: 0.747
boot: 0.676
graphic: 0.675
device: 0.657
semantic: 0.642
user-level: 0.622
files: 0.616
kernel: 0.613
mistranslation: 0.562
risc-v: 0.557
hypervisor: 0.546
x86: 0.543
socket: 0.475
network: 0.471
PID: 0.460
vnc: 0.424
ppc: 0.412
KVM: 0.398
i386: 0.391
VMM: 0.324
virtual: 0.311
TCG: 0.297
--------------------
arm: 0.978
debug: 0.900
architecture: 0.200
hypervisor: 0.054
files: 0.045
virtual: 0.044
user-level: 0.041
boot: 0.034
semantic: 0.030
VMM: 0.020
TCG: 0.017
device: 0.012
PID: 0.012
kernel: 0.011
register: 0.010
network: 0.009
socket: 0.006
vnc: 0.005
performance: 0.004
risc-v: 0.004
assembly: 0.004
permissions: 0.004
peripherals: 0.002
graphic: 0.002
ppc: 0.001
mistranslation: 0.001
KVM: 0.000
x86: 0.000
i386: 0.000

ARM: RES0/RES1 SCTLR fields not read-only

There are fields in SCTLR that are RAO/SBOP or WI or in the case of the RR field, accessible only in secure mode. Currently it seems that qemu just propagates any write to SCTLR to the register and this screwed up in a bootloader that I am debugging.

On 3 April 2017 at 23:17, Yifan <email address hidden> wrote:
> There are fields in SCTLR that are RAO/SBOP or WI or in the case of the
> RR field, accessible only in secure mode. Currently it seems that qemu
> just propagates any write to SCTLR to the register and this screwed up
> in a bootloader that I am debugging.

Yes, we're a bit loose in QEMU on the handling of reserved bits.

Note that most of the SCTLR bits like this are RAO/SBOP or RAZ/SBZP,
so the guest should not be writing wrong values to them.

thanks
-- PMM


So there won't be a fix in the future? I'm working with debugging a proprietary bootloader that I do not have the source code for. I wonder if this becomes an issue for any other platform targets.  

Well, I wouldn't object to a patch to fix it (it would have to correctly handle the various different versions of the CPU architecture we implement, etc), but I'm not planning on writing one today myself.


The QEMU project is currently moving its bug tracking to another system.
For this we need to know which bugs are still valid and which could be
closed already. Thus we are setting the bug state to "Incomplete" now.

If the bug has already been fixed in the latest upstream version of QEMU,
then please close this ticket as "Fix released".

If it is not fixed yet and you think that this bug report here is still
valid, then you have two options:

1) If you already have an account on gitlab.com, please open a new ticket
for this problem in our new tracker here:

    https://gitlab.com/qemu-project/qemu/-/issues

and then close this ticket here on Launchpad (or let it expire auto-
matically after 60 days). Please mention the URL of this bug ticket on
Launchpad in the new ticket on GitLab.

2) If you don't have an account on gitlab.com and don't intend to get
one, but still would like to keep this ticket opened, then please switch
the state back to "New" within the next 60 days (otherwise it will get
closed as "Expired"). We will then eventually migrate the ticket auto-
matically to the new system (but you won't be the reporter of the bug
in the new system and thus won't get notified on changes anymore).

Thank you and sorry for the inconvenience.


[Expired for QEMU because there has been no activity for 60 days.]

