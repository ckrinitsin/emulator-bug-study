x86: 0.942
i386: 0.935
architecture: 0.922
performance: 0.853
user-level: 0.820
graphic: 0.772
semantic: 0.752
network: 0.716
device: 0.688
ppc: 0.677
mistranslation: 0.655
register: 0.594
kernel: 0.594
socket: 0.582
PID: 0.576
files: 0.558
hypervisor: 0.533
virtual: 0.530
boot: 0.527
vnc: 0.518
TCG: 0.467
permissions: 0.453
peripherals: 0.448
debug: 0.444
risc-v: 0.435
VMM: 0.433
arm: 0.400
KVM: 0.382
assembly: 0.284
--------------------
x86: 0.933
architecture: 0.711
i386: 0.662
kernel: 0.547
virtual: 0.441
performance: 0.413
debug: 0.264
TCG: 0.056
files: 0.033
hypervisor: 0.025
PID: 0.021
register: 0.010
risc-v: 0.009
VMM: 0.008
network: 0.007
socket: 0.005
device: 0.005
user-level: 0.004
boot: 0.003
vnc: 0.003
semantic: 0.003
assembly: 0.002
ppc: 0.002
peripherals: 0.001
permissions: 0.001
arm: 0.001
graphic: 0.001
mistranslation: 0.000
KVM: 0.000

x86_64 and i386 return 0 when reading MSR_TSC

Running NetBSD 6.1 (i386 and amd64) under QEMU (from git - 1.5.50 is the version it shows) results in an incorrectly set
TSC frequency (set to 0), because NetBSD uses rdmsr(TSC_MSR) for its serializing CPU counter.

To reproduce the problem, you can run an install ISO of NetBSD 6.1 (either i386 or amd64, depending on which qemu).  Quit out of the installer, and you're left at a root prompt:

# sysctl machdep.tsc_freq
machdep.tsc_freq = 0

...on real hardware, it will return the TSC frequency:

# sysctl machdep.tsc_freq
machdep.tsc_freq = 3292685070

...this causes problems with a number of applications.

The NetBSD code which reads the MSR is here:

http://nxr.netbsd.org/xref/src/sys/arch/x86/x86/tsc.c#262

... the "rdmsr(MSR_TSC)" call in cpu_counter_serializing() always returns 0 when run under QEMU.

I should mention, the NetBSD 6.1 ISO I used for testing is here:

http://iso.netbsd.org/pub/NetBSD/iso/6.1/NetBSD-6.1-amd64.iso



The NetBSD problem report where this issue was raised:

http://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=47967

a workaround has been put in place for now, but it would be good to fix this in QEMU.

Looking through old bug tickets... can you still reproduce this issue with the latest version of QEMU? Or could we close this ticket nowadays?


[Expired for QEMU because there has been no activity for 60 days.]

