device: 0.910
debug: 0.908
graphic: 0.907
vnc: 0.877
PID: 0.864
architecture: 0.839
arm: 0.835
files: 0.834
socket: 0.826
network: 0.813
TCG: 0.768
ppc: 0.767
register: 0.765
assembly: 0.737
i386: 0.722
VMM: 0.697
peripherals: 0.691
semantic: 0.646
risc-v: 0.604
permissions: 0.599
performance: 0.592
virtual: 0.584
hypervisor: 0.534
x86: 0.511
boot: 0.467
user-level: 0.467
kernel: 0.352
mistranslation: 0.317
KVM: 0.062

macOS 12.x ld: warning: -undefined dynamic_lookup may not work with chained fixups
Description of problem:
Not sure if this is a serious or negligible problem and if it has any significant runtime implications but reporting it anyway:

```
$ ld -v
@(#)PROGRAM:ld  PROJECT:ld64-819.6
BUILD 14:58:44 Aug  5 2022
configured to support archs: armv6 armv7 armv7s arm64 arm64e arm64_32 i386 x86_64 x86_64h armv6m armv7k armv7m armv7em
LTO support using: LLVM version 14.0.0, (clang-1400.0.29.102) (static support for 29, runtime is 29)
TAPI support using: Apple TAPI version 14.0.0 (tapi-1400.0.11)

$ ninja -C build
ninja: Entering directory `build'
[314/2946] Linking static target libevent-loop-base.a
warning: /Library/Developer/CommandLineTools/usr/bin/ranlib: archive library: libevent-loop-base.a the table of contents is empty (no object file members in the library define global symbols)
[2044/2946] Generating qemu-system-aarch64 with a custom command
qemu-system-aarch64.tmp: replacing existing signature
[2584/2946] Linking target tests/plugin/libempty.dylib
ld: warning: -undefined dynamic_lookup may not work with chained fixups
[2585/2946] Linking target tests/plugin/libbb.dylib
ld: warning: -undefined dynamic_lookup may not work with chained fixups
[2588/2946] Linking target tests/plugin/libinsn.dylib
ld: warning: -undefined dynamic_lookup may not work with chained fixups
[2589/2946] Linking target tests/plugin/libmem.dylib
ld: warning: -undefined dynamic_lookup may not work with chained fixups
[2592/2946] Linking target tests/plugin/libsyscall.dylib
ld: warning: -undefined dynamic_lookup may not work with chained fixups
[2946/2946] Linking target tests/qtest/test-arm-mptimer
```

I saw a similar discussions in Bazel building system, CPython, and Ruby:
- https://github.com/bazelbuild/bazel/issues/16413
- https://github.com/python/cpython/issues/97524
- https://github.com/ruby/ruby/pull/6193
- https://issues.guix.gnu.org/issue/57849
Steps to reproduce:
1. ` ./configure --target-list=aarch64-softmmu,arm-softmmu --enable-cocoa --enable-plugins` (note that target list is not that important in this case though)
2. `ninja -C build`
3. Observe the warnings
Additional information:
See "New Features" subsection under "Linking" section for chained fixup
https://developer.apple.com/documentation/xcode-release-notes/xcode-13-release-notes for more information:

> All programs and dylibs built with a deployment target of macOS 12 or iOS 15 or later now use the chained fixups format. This uses different load commands and LINKEDIT data, and wonâ€™t run or load on older OS versions. (49851380)
