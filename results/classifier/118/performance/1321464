performance: 0.986
i386: 0.830
user-level: 0.803
semantic: 0.775
graphic: 0.774
PID: 0.755
ppc: 0.699
kernel: 0.674
device: 0.641
socket: 0.641
peripherals: 0.608
network: 0.566
architecture: 0.559
register: 0.541
x86: 0.539
permissions: 0.523
debug: 0.515
mistranslation: 0.510
boot: 0.508
files: 0.499
arm: 0.499
hypervisor: 0.480
VMM: 0.395
risc-v: 0.392
vnc: 0.372
TCG: 0.363
assembly: 0.339
virtual: 0.331
KVM: 0.306

qemu/block/qcow2.c:1942: possible performance problem ?

I just ran static analyser cppcheck over today (20140520) qemu source code.

It said many things, including

[qemu/block/qcow2.c:1942] -> [qemu/block/qcow2.c:1943]: (performance) Buffer 'pad_buf' is being writ
ten before its old content has been used.

Source code is

            memset(pad_buf, 0, s->cluster_size);
            memcpy(pad_buf, buf, nb_sectors * BDRV_SECTOR_SIZE);

Worth tuning ?

Similar problem here

[qemu/block/qcow.c:815] -> [qemu/block/qcow.c:816]: (performance) Buffer 'pad_buf' is being written 
before its old content has been used.

and

[qemu/hw/i386/acpi-build.c:1265] -> [qemu/hw/i386/acpi-build.c:1267]: (performance) Buffer 'dsdt' is
 being written before its old content has been used.

I can only speak for qcow2 and qcow, but for those places, I don't think it is worth fixing. First of all, both are image formats, so the bottleneck is generally the disk on which the images are stored and not main memory, so an overeager memset should not cause any problems.

For both, the relevant piece of code is in qcow2/qcow_write_compressed() which are rarely used anyway (as far as I know) and even if used, they have additional overhead due to having to compress data first, so “fixing” the memset() won't make them noticibly faster.

I don't know about the ACPI thing, but to me it seems that it's copying data to a temporary buffer and then overwriting its beginning with zeroes. From my very limited ACPI knowledge I'd guess this function is called at some point during qemu startup, so it doesn't seem worth optimizing either.

On Tue, May 20, 2014 at 11:21:05PM -0000, Max Reitz wrote:
> I can only speak for qcow2 and qcow, but for those places, I don't think
> it is worth fixing. First of all, both are image formats, so the
> bottleneck is generally the disk on which the images are stored and not
> main memory, so an overeager memset should not cause any problems.
> 
> For both, the relevant piece of code is in qcow2/qcow_write_compressed()
> which are rarely used anyway (as far as I know) and even if used, they
> have additional overhead due to having to compress data first, so
> “fixing” the memset() won't make them noticibly faster.

I agree.  It won't make a noticable difference and the compressed writes
are only done in qemu-img convert, not for running guests.

But patches to change this wouldn't hurt either.

Stefan


Thanks for reporting this, but it looks like the related code has been removed a while ago (there is no more "pad_buf" in qcow.c or qcow2.c), so closing this ticket. If you still can reproduce the (same or similar) problem with the latest version of QEMU, please open a new ticket instead.

