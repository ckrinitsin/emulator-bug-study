graphic: 0.633
performance: 0.571
semantic: 0.506
device: 0.442
vnc: 0.360
permissions: 0.351
files: 0.337
debug: 0.336
PID: 0.320
network: 0.296
KVM: 0.282
other: 0.274
socket: 0.264
boot: 0.260

Issue with Graphical Interface on RISC-V Emulation in QEMU
Description of problem:
I am facing an issue when attempting to run Ubuntu on RISC-V architecture in QEMU with a graphical interface. Specifically, when executing the following command without the -nographic option, the operating system fails to start:

```bash
qemu-system-riscv64 -machine virt -m 2048 -smp 4 -bios /usr/lib/riscv64-linux-gnu/opensbi/generic/fw_jump.bin -kernel /usr/lib/u-boot/qemu-riscv64_smode/uboot.elf -drive file=ubuntu-22.04.3-preinstalled-server-riscv64+unmatched.img,format=raw,if=virtio
```

I have not found any examples online where QEMU is used with RISC-V architecture without the -nographic option, which raises uncertainty about the feasibility of running it with a graphical interface.

Interestingly, when I run a similar command for x86_64 architecture, the operating system starts successfully with a graphical interface:

```bash
qemu-system-x86_64 -enable-kvm -m 2G -drive file=ubuntu-22.04.3-desktop-amd64.iso,format=raw -boot c -cpu host -vga std -device virtio-net-pci -device virtio-rng-pci
```
Steps to reproduce:
Execute QEMU with RISC-V architecture without the -nographic option.

```bash
qemu-system-riscv64 -machine virt -m 2048 -smp 4 -bios /usr/lib/riscv64-linux-gnu/opensbi/generic/fw_jump.bin -kernel /usr/lib/u-boot/qemu-riscv64_smode/uboot.elf -drive file=ubuntu-22.04.3-preinstalled-server-riscv64+unmatched.img,format=raw,if=virtio
```

(The above command fails to start with a graphical interface)

Execute QEMU with RISC-V architecture and the -nographic option.

```bash
qemu-system-riscv64 -machine virt -nographic -m 2048 -smp 4 -bios /usr/lib/riscv64-linux-gnu/opensbi/generic/fw_jump.bin -kernel /usr/lib/u-boot/qemu-riscv64_smode/uboot.elf -drive file=ubuntu-22.04.3-preinstalled-server-riscv64+unmatched.img,format=raw,if=virtio
```
(The above command works, but without a graphical interface)

Execute QEMU with x86_64 architecture.

```bash
qemu-system-x86_64 -enable-kvm -m 2G -drive file=ubuntu-22.04.3-desktop-amd64.iso,format=raw -boot c -cpu host -vga std -device virtio-net-pci -device virtio-rng-pci
```
(The above command works and starts with a graphical interface)
