graphic: 0.927
device: 0.848
performance: 0.816
files: 0.805
semantic: 0.754
network: 0.672
debug: 0.671
socket: 0.650
permissions: 0.621
PID: 0.571
other: 0.534
boot: 0.500
vnc: 0.498
KVM: 0.222

QEMU doesn't implement ARMv4/v5 legacy SCTLR.U==0 load-and-rotate unaligned access handling
Description of problem:
**ldr r7, \[r0, r1\]** works differently on real device and QEMU. Probably all **ldr Rd, \[Rs\]** commands works wrongly in QEMU with Raspberry Pi emulation.
Steps to reproduce:
1. Launch the attached software **kernel_qemu.img** in QEMU.
2. Launch the attached software **kerenel.img** on real Raspberry Pi 1B+.
3. Look at the r7. It contains different data.
Additional information:
**kernel_qemu.img** and **kerenel.img** are the same program. It just compiled with different origins - 0x8000 for real device and 0x10000 for QEMU. But code inside the program works at the same addresses.

r0 = 0x183a4

r1 = 0x817

**\[r0, r1\]** points to byte 0x42 in memory with such data:

**0x80 0x15 0x22 \[0x42\] 0x03 0x21 0x87**

After **ldr r7, \[r0, r1\]** execution real device puts to r7: **0x22158042**

After **ldr r7, \[r0, r1\]** execution QEMU puts to r7: **0x87210342**

QEMU:

![QEMU.png](/uploads/51ecbf1689d36f969cb482f2613ccb58/QEMU.png)

Real Raspberry Pi 1B+: ![real.jpg](/uploads/2a9cc3f4bc33d7f254c549e5086070a7/real.jpg)

[kernel_qemu.img](/uploads/ae6a7490660569d5fe56adc9f4dde85d/kernel_qemu.img) [kernel.img](/uploads/48c94a66370c1fe8720fe89603c45c7b/kernel.img)
