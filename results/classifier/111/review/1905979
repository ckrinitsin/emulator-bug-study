semantic: 0.119
permissions: 0.111
other: 0.083
network: 0.080
device: 0.079
PID: 0.075
performance: 0.068
files: 0.064
debug: 0.062
socket: 0.060
vnc: 0.052
boot: 0.051
KVM: 0.049
graphic: 0.046
debug: 0.260
files: 0.183
other: 0.096
performance: 0.064
device: 0.055
semantic: 0.054
permissions: 0.051
vnc: 0.045
PID: 0.043
boot: 0.037
KVM: 0.033
network: 0.029
graphic: 0.029
socket: 0.020

Check if F_OFD_SETLK is supported may give wrong result

In util/osdep.c there is a function qemu_probe_lock_ops() to check if file locks F_OFD_SETLK and F_OFD_GETLK (of the style "Open file description locks (non-POSIX)") are supported.

This test is done by trying a lock operation on the file /dev/null.

This test can get a wrong result.

The result is (probably) if the operating system *in general* supports these locks. However, it does not guarantee that the file system where the lock is really wanted (for instance, in caller raw_check_lock_bytes() in block/file-posix.c) does support these locks.

(In theory it could even be that /dev/null, being a device special file, does not support the lock type while a plain file would.)

This is in particular relevant for disk images which are stored on a shared file system (my particular use case is the Quobyte file system, which appears not to support these locks).

The code as mentioned above is present in the master branch (I checked commit ea8208249d1082eae0444934efb3b59cd3183f05) but also for example on stable-2.11 commit 0982a56a551556c704dc15752dabf57b4be1c640)

This is rather serious, since it causes VMs to crash:

Unexpected error in raw_check_lock_bytes() at /build/qemu-PKI6mj/qemu-4.2/block/file-posix.c:796:
Failed to get "write" lock
2020-11-23 11:32:27.810+0000: shutting down, reason=crashed

when openstack attempts to create a snapshot.

In this thread, it is pointed out that support for OFD is provided by the generic VFS layer in the kernel, so there should never be a situation where one filesystem supports OFD and another does not support OFD:

  https://lists.gnu.org/archive/html/qemu-devel/2020-11/msg05264.html

Can you say what filesystem you are using that exhibits the lack of OFD support, and what kernel version

Interesting. Thanks for the link.

The file system we are using is the Quobyte file system (2.24.1) (https://www.quobyte.com/), which works via FUSE. 
We've had problems with OFD locks with this file system in the past, so my first thought, seeing the error in comment #1, was that those would be to blame.

But if the OFD locks are not really handled by the file system, I'm not sure how that explains the OFD lock issues we had in the past. I don't suppose this changed in the last year or so. Just now I made a little test program (basically copying qemu_lock_fd_test() and qemu_probe_lock_ops() from qemu) to double-check, and indeed right now it seems that the OFD locks *are* working on the Quobyte file system. Or at least qemu_lock_fd_test() doesn't return an error.

So now I'm back to square one on diagnosing the observed error. It occurred in an installation of Openstack Ussuri installed on Ubuntu 18.04 Bionic using the Ubuntu Cloud Archive for packaging. The Cloud Archive has backports of the latest Qemu to earlier Ubuntu versions. The exact qemu version was http://ubuntu-cloud.archive.canonical.com/ubuntu/pool/main/q/qemu/qemu_4.2-3ubuntu6.7~cloud0_amd64.deb . 

Annoyingly I have not been able to locate the git repo from which the Ubuntu Cloud Archive creates its packages (containing the patches and build changes for backports); all I can find is version 4.2-3ubuntu6.7 (without ~cloud0) which is for Ubuntu 20.04 Focal. 

For now we're working around it by downgrading Qemu to the normal Bionic version (2.11+dfsg-1ubuntu7.33)

You wouldn't happen to know where the Ubuntu Cloud Archive stores exact files it creates its packages from? (I have already asked on stackoverflow without success so far:  https://stackoverflow.com/questions/65146846/from-which-git-repos-does-the-ubuntu-cloud-archive-compile-its-packages)



Look in the same directory as that .deb link above - the the files ending in orig.tar.gz (upstream source) and files ending in debian.tar.xz (downstream modifications)

The kernel version is Linux hostname 4.15.0-124-generic #127-Ubuntu SMP Fri Nov 6 10:54:43 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux

That is indeed the source and patches, but I wanted to follow their git repo for easier maintenance. Surely they must have one.

[Expired for QEMU because there has been no activity for 60 days.]

