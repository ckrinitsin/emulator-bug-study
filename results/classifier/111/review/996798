device: 0.168
semantic: 0.167
vnc: 0.147
other: 0.109
graphic: 0.074
performance: 0.050
files: 0.049
socket: 0.046
permissions: 0.043
PID: 0.043
network: 0.032
debug: 0.030
boot: 0.030
KVM: 0.010
debug: 0.239
files: 0.141
performance: 0.116
other: 0.110
PID: 0.108
device: 0.062
semantic: 0.060
boot: 0.042
network: 0.041
socket: 0.025
graphic: 0.017
vnc: 0.016
KVM: 0.012
permissions: 0.011

Incorrect order of task switching

In Intel  specifications (http://download.intel.com/design/processor/manuals/253668.pdf 7.3), we can see:

    8. Saves the state of the current (old) task in the current task’s TSS. 

…

   11. Loads the task register with the segment selector and descriptor for the new  task's TSS.

But, in QEMU code (https://raw.github.com/qemu/QEMU/v1.0/target-i386/op_helper.c :375), the order is reversed: TSS registers & segments loads BEFORE save old task state.

Some bug in VirtualBox: https://www.virtualbox.org/ticket/10532

Is problem still reproducable with the latest version of QEMU, or has it been fixed nowadays?

[Expired for QEMU because there has been no activity for 60 days.]

