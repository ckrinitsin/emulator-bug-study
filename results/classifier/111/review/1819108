vnc: 0.150
device: 0.126
other: 0.114
semantic: 0.098
PID: 0.090
files: 0.067
socket: 0.055
boot: 0.054
KVM: 0.049
permissions: 0.045
graphic: 0.042
network: 0.039
performance: 0.038
debug: 0.034
debug: 0.499
network: 0.075
PID: 0.068
KVM: 0.058
socket: 0.056
files: 0.044
vnc: 0.044
semantic: 0.037
other: 0.036
device: 0.025
performance: 0.022
boot: 0.016
permissions: 0.011
graphic: 0.008

qemu-bridge-helper failure but qemu not exit

When qemu-bridge-helper run failed, its parent process qemu is still alive.
This is my command line:

qemu-system-x86_64 -curses -enable-kvm -cpu host -smp 4 -m 4096 \
  -vnc :1 \
  -kernel /data/xugang_vms/boot/vmlinuz \
  -initrd /data/xugang_vms/boot/initram \
  -append 'module_blacklist=drm,evbug net.ifnames=0 biosdevname=0 ROOTDEV=rootfs' \
  -drive file=/data/xugang_vms/instances/vn7/rootfs.img,format=qcow2,if=virtio \
  -monitor unix:/data/xugang_vms/var/monitor/vn7.sock,server,nowait \
  -netdev bridge,br=vmbr99,helper="/root/bridgehelper --ns=kvm_1 ",id=n1 -device virtio-net,netdev=n1,mac=92:99:98:76:01:07

"/root/bridgehelper" is self defined helper binary by me. But after bridge-helper exited with failure(not send fd to qemu process yet), the linux vm's console will be messed up. I checked the qemu source code(at net/tap.c) and found following snip:

===>
do {
            fd = recv_fd(sv[0]);
        } while (fd == -1 && errno == EINTR);
        saved_errno = errno;

        close(sv[0]);

        while (waitpid(pid, &status, 0) != pid) {
            /* loop */
        }
<=========

why recv_fd will infinitely wait for recv? Maybe it shall waitpid and then recv_fd ?


This is an automated cleanup. This bug report has been moved to QEMU's
new bug tracker on gitlab.com and thus gets marked as 'expired' now.
Please continue with the discussion here:

 https://gitlab.com/qemu-project/qemu/-/issues/166


