semantic: 0.180
other: 0.177
device: 0.104
performance: 0.078
vnc: 0.072
graphic: 0.072
permissions: 0.059
PID: 0.050
files: 0.040
debug: 0.038
network: 0.038
boot: 0.036
socket: 0.034
KVM: 0.022
files: 0.189
performance: 0.129
semantic: 0.126
other: 0.118
debug: 0.094
PID: 0.077
network: 0.047
KVM: 0.046
device: 0.045
socket: 0.034
boot: 0.028
permissions: 0.027
graphic: 0.021
vnc: 0.020

Variation of SVE register size (qemu-user-aarch64)

Specification of ARMv8-A SVE extention allows various values ​​for the size of the SVE register. On the other hand, it seems that the current qemu-aarch64 supports only the maximum length of 2048 bits as the SVE register size. I am writing an assembler program for a CPU that is compliant with ARMv8-A + SVE and has a 512-bit SVE register, but when this is run with qemu-user-aarch64, a 2048-bit load / store instruction is executed This causes a segmentation fault. Shouldn't qeum-user-aarch64 have an option to specify the SVE register size?

This is already managed by a cpu property.

0df9142d27d5 ("target/arm/cpu64: max cpu: Introduce sve<N> properties")

See docs/arm-cpu-features.rst

Try "-cpu max,sve512=on".



Note also that the vector length in SVE is not fixed -- you should be writing your guest code to support arbitrary vector lengths, because otherwise it will not run on all SVE-supporting CPUs.


Thank you for your kind advice. I'll try it.

