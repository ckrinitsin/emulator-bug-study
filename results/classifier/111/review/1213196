semantic: 0.163
other: 0.155
socket: 0.149
device: 0.073
network: 0.062
PID: 0.061
performance: 0.058
graphic: 0.051
vnc: 0.049
files: 0.048
permissions: 0.036
boot: 0.035
debug: 0.034
KVM: 0.025
debug: 0.273
network: 0.220
other: 0.093
files: 0.073
semantic: 0.070
socket: 0.069
performance: 0.058
device: 0.039
PID: 0.027
boot: 0.026
graphic: 0.017
permissions: 0.017
vnc: 0.012
KVM: 0.007

-serial tcp should hang up when DTR goes low

In keeping with the spirit of serial modem control signals, de-asserting DTR should cause the TCP connection to break; asserting DTR should cause QEMU to initiate a new connection or for it to accept another (in server mode; this may involve waiting for one to arrive, too).

In addition to allowing low DTR to drop the socket connection, and allowing low DTR to reject a socket connection, the DCD modem bit also be implemented - DCD should follow the state of the TCP socket: a connected socket should pull DCD high, and a disconnected socket should pull DCD low. From what Ive seen in the source, it looks like a serial IOCTL functioned needs to be added to chardev/char-socket.c to allow the MSR bits to be tracked against the state of the socket.  DCD should be very easy to implement this way, but I hadn't thought about DTR.

Sent in a patch for this.

https://lists.gnu.org/archive/html/qemu-devel/2020-12/msg04658.html

DTR controls the socket.

DCD reflects the state of the socket.




This is an automated cleanup. This bug report has been moved to QEMU's
new bug tracker on gitlab.com and thus gets marked as 'expired' now.
Please continue with the discussion here:

 https://gitlab.com/qemu-project/qemu/-/issues/97


