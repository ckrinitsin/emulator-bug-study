other: 0.206
device: 0.144
semantic: 0.134
graphic: 0.109
performance: 0.070
vnc: 0.064
files: 0.049
permissions: 0.039
PID: 0.037
boot: 0.036
debug: 0.034
socket: 0.031
network: 0.028
KVM: 0.019
device: 0.230
other: 0.174
files: 0.112
KVM: 0.110
semantic: 0.091
PID: 0.052
socket: 0.044
network: 0.035
debug: 0.034
boot: 0.034
graphic: 0.027
performance: 0.024
permissions: 0.019
vnc: 0.013

[Feature Request] Automatic device configuration discovery

Would it be possible to have a script that enumerates the device tree of a Linux host and generates a qemu command line that would recreate it under emulation? The user would have to customize the arguments (for instance to point to disk image files), but it would take a lot of the guesswork out.

Similarly, is there information that can be gleaned from the kernel build config that would help with configuration?

This is occasionally asked for but unfortunately not in the general case possible. Device trees contain enough information for a guest OS to use the hardware; they do not contain a full description of how the hardware is actually configured and connected together, and they don't say anything about parts of the hardware that are "discoverable" (ie probeable, like PCI). So there isn't enough information to produce a full board model, and the parts that correspond to QEMU command line options (like pluggable devices such as ethernet cards) aren't usually in the DT at all.

The expected workflow goes the other way around -- you start by picking a machine type that QEMU models, and then configure the kernel and use the device tree that is intended for it, in the same way you would if you wanted to get Linux running on a real hardware board.


Right, and since QEMU also only supports a limited set of devices, there is no chance that you can mirror an arbitrary host this way. But if you want to convert a host into a VM and do not care whether each and every detail can be mirrored, have a look at http://libguestfs.org/virt-p2v.1.html - that's likely the best solution so far.

