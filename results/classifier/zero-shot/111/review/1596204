other: 0.183
device: 0.139
semantic: 0.131
PID: 0.076
graphic: 0.072
performance: 0.064
permissions: 0.059
debug: 0.053
socket: 0.049
network: 0.046
vnc: 0.041
boot: 0.038
files: 0.033
KVM: 0.015
debug: 0.417
files: 0.105
other: 0.075
device: 0.072
network: 0.065
boot: 0.048
socket: 0.044
semantic: 0.041
performance: 0.040
graphic: 0.026
PID: 0.023
permissions: 0.020
vnc: 0.015
KVM: 0.010

UART problem in raspi2

I was trying to run the raspberry pi uart example at https://github.com/dwelch67/raspberrypi/tree/master/uart01 using qemu 2.6.0, but it didn't work.

The steps I took were:
* Edit uart01/memmap and change origin to 0x10000 (which is the address qemu starts executing),
* make
* /usr/local/bin/qemu-system-arm -machine raspi2 -m 512M -nographic -gdb tcp::26000 -S -kernel uart01.bin

Then start arm-none-eabi-gdb and run following commands:

target remote localhost:26000
symbol-file ./uart01.elf


Then, when I start the program, it seems that the GET32(AUX_MU_LSR_REG)&0x20 condition never becomes true.

This works on actual hardware, so I am wondering if I'm doing any steps incorrectly or missing.

This is because you're running a binary for the raspberry pi 1 on a model of the raspberry pi 2. The peripherals are at different locations on the two boards, and so your program doesn't work. You can fix that by changing all the register addresses that start 0x20..... to 0x3f...., or more complicatedly by using the boards/cpuid/ code in that raspberrypi repo to detect the correct PBASE value to use.

Secondly, the output goes to the second serial port, which in your command line is not being directed anywhere. You can put the second serial port's output on stdio with the first serial port output thrown away using '-serial null -serial stdio'. (For more complicated redirections, see the QEMU docs.)

If I do those two things, then the uart01 example runs fine on QEMU.


