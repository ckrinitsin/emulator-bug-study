semantic: 0.161
device: 0.125
other: 0.115
vnc: 0.085
network: 0.070
files: 0.067
debug: 0.061
graphic: 0.057
permissions: 0.055
socket: 0.054
performance: 0.052
boot: 0.036
PID: 0.033
KVM: 0.029
debug: 0.499
semantic: 0.139
KVM: 0.073
performance: 0.057
files: 0.052
other: 0.042
PID: 0.034
device: 0.025
network: 0.022
graphic: 0.014
socket: 0.013
boot: 0.011
permissions: 0.010
vnc: 0.009

loopz/loopnz clearing previous instruction's modified flags on cx -> 0

If you run QBasic in qemu, printing a double-type single-digit number will print an extra decimal point (e.g. PRINT CDBL(3) prints "3.") that does not appear when running on a real CPU (or on qemu with -enable-kvm). I tracked this down to the state of the status flags after a loopnz instruction.

After executing a sequence like this in qemu:

	mov bx,1
	mov cx,1
	dec bx    ; sets Z bit in flags
A:	loopnz A  ; should not modify flags

Z is incorrectly clear afterwards. loopz does the same thing (but not plain loop). Interestingly, inserting pushf+popf after dec results in Z set, so loopnz/loopz does not always clear Z itself but is rather interfering with the previous instruction's flag setting.

Version 5.1.0-rc0, x86-64 host.





https://git.qemu.org/?p=qemu.git;a=commitdiff;h=3cb3a7720b01830abd5

