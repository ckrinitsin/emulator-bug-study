ppc: 0.904
mistranslation: 0.877
graphic: 0.858
device: 0.805
vnc: 0.766
files: 0.684
semantic: 0.679
VMM: 0.642
architecture: 0.619
kernel: 0.614
PID: 0.582
TCG: 0.569
i386: 0.552
register: 0.524
socket: 0.488
debug: 0.484
x86: 0.481
risc-v: 0.426
KVM: 0.381
peripherals: 0.377
performance: 0.377
arm: 0.369
network: 0.360
boot: 0.359
user-level: 0.330
assembly: 0.268
hypervisor: 0.235
permissions: 0.232
virtual: 0.215
--------------------
ppc: 0.998
debug: 0.552
assembly: 0.170
register: 0.106
hypervisor: 0.084
TCG: 0.053
files: 0.036
peripherals: 0.015
performance: 0.012
virtual: 0.012
semantic: 0.011
user-level: 0.009
device: 0.009
kernel: 0.007
PID: 0.004
architecture: 0.004
KVM: 0.003
VMM: 0.003
network: 0.002
arm: 0.002
boot: 0.001
x86: 0.001
risc-v: 0.001
permissions: 0.001
socket: 0.001
graphic: 0.001
vnc: 0.001
i386: 0.001
mistranslation: 0.001

PPC msgsnd for DOORBELL CRITICAL masked by MSR[EE] instead of MSR[CE]
Description of problem:
When executing PPC instruction "msgsnd r3. with r3 = 0x08000001" an DOORBELL CRITICAL exception is raised on core number 1. But this exception is masked by MSR\[EE\] bit, the MSR\[EE\] should be set to 1 in core1 to get this exception. But the NXP E500MCRM.pdf reference manual indicates that MSR\[CE\] is the mask bit for DOORBELL_CRITICAL Exception.
Additional information:
In qemu-8.1.2/target/ppc/excp_helper.c i try to change in ppc_next_unmasked_interrupt_generic function:
   
```
if (FIELD_EX64(env->msr, MSR, CE)) {
    /* Critical doorbell */
    if (env->pending_interrupts & PPC_INTERRUPT_CDOORBELL) {   <- move this part from (async_deliver != 0)
        return PPC_INTERRUPT_CDOORBELL;
     }
     /* External critical interrupt */
     if (env->pending_interrupts & PPC_INTERRUPT_CEXT) {
         return PPC_INTERRUPT_CEXT;
     }
}
```
 

And it seems to work in my case.
