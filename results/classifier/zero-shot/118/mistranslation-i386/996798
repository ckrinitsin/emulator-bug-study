mistranslation: 0.863
device: 0.842
virtual: 0.840
i386: 0.833
hypervisor: 0.825
architecture: 0.792
vnc: 0.726
register: 0.716
graphic: 0.663
performance: 0.625
socket: 0.583
semantic: 0.582
network: 0.552
ppc: 0.546
risc-v: 0.459
x86: 0.426
boot: 0.402
permissions: 0.386
VMM: 0.378
kernel: 0.377
PID: 0.346
files: 0.296
arm: 0.277
TCG: 0.240
debug: 0.233
peripherals: 0.190
assembly: 0.119
user-level: 0.111
KVM: 0.039
--------------------
x86: 0.990
i386: 0.984
virtual: 0.900
hypervisor: 0.697
debug: 0.141
files: 0.054
kernel: 0.050
register: 0.049
architecture: 0.045
TCG: 0.040
performance: 0.036
PID: 0.034
user-level: 0.015
assembly: 0.015
device: 0.012
semantic: 0.011
risc-v: 0.006
boot: 0.005
network: 0.005
VMM: 0.002
ppc: 0.002
socket: 0.002
peripherals: 0.001
graphic: 0.001
vnc: 0.001
KVM: 0.000
permissions: 0.000
mistranslation: 0.000
arm: 0.000

Incorrect order of task switching

In Intel  specifications (http://download.intel.com/design/processor/manuals/253668.pdf 7.3), we can see:

    8. Saves the state of the current (old) task in the current task’s TSS. 

…

   11. Loads the task register with the segment selector and descriptor for the new  task's TSS.

But, in QEMU code (https://raw.github.com/qemu/QEMU/v1.0/target-i386/op_helper.c :375), the order is reversed: TSS registers & segments loads BEFORE save old task state.

Some bug in VirtualBox: https://www.virtualbox.org/ticket/10532

Is problem still reproducable with the latest version of QEMU, or has it been fixed nowadays?

[Expired for QEMU because there has been no activity for 60 days.]

