socket: 0.921
architecture: 0.900
network: 0.791
device: 0.791
kernel: 0.783
user-level: 0.735
performance: 0.633
ppc: 0.555
graphic: 0.546
arm: 0.539
register: 0.510
mistranslation: 0.496
risc-v: 0.455
files: 0.439
vnc: 0.435
VMM: 0.403
permissions: 0.403
boot: 0.360
peripherals: 0.304
PID: 0.292
KVM: 0.290
TCG: 0.257
debug: 0.255
i386: 0.242
hypervisor: 0.198
x86: 0.194
virtual: 0.148
assembly: 0.110
semantic: 0.011

socket type mapping wrong for mips app-level emulation

linux-user/syscall.c's do_socket function contains socket type remapping to work around the nonsensically-permuted MIPS socket types. However, it fails to account for the SOCK_NONBLOCK and SOCK_CLOEXEC flags that may be or'd onto the type. Thus, a call from the application such as:

socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)

will fail to have the type permutation performed, and will be passed to the system as:

socket(AF_INET, SOCK_DGRAM, IPPROTO_TCP)

resulting in EPROTONOSUPPORT.

To fix this, the flag bits should be masked off of the type before the permutation. They also need remapping themselves (since MIPS uses different values for these flags bits).

This should be fixed in QEMU 1.6.


