i386: 0.959
x86: 0.937
graphic: 0.914
debug: 0.886
kernel: 0.868
files: 0.821
user-level: 0.820
architecture: 0.810
register: 0.784
performance: 0.767
device: 0.760
semantic: 0.747
mistranslation: 0.698
ppc: 0.678
permissions: 0.653
peripherals: 0.625
PID: 0.622
hypervisor: 0.608
network: 0.604
risc-v: 0.540
socket: 0.530
TCG: 0.521
boot: 0.517
vnc: 0.514
KVM: 0.509
VMM: 0.487
arm: 0.454
virtual: 0.383
assembly: 0.383
--------------------
i386: 0.992
x86: 0.941
virtual: 0.788
user-level: 0.652
debug: 0.331
hypervisor: 0.136
kernel: 0.076
boot: 0.063
TCG: 0.034
PID: 0.023
performance: 0.012
files: 0.012
socket: 0.009
semantic: 0.006
register: 0.006
device: 0.006
network: 0.006
vnc: 0.004
architecture: 0.004
graphic: 0.003
assembly: 0.002
ppc: 0.002
risc-v: 0.002
permissions: 0.002
VMM: 0.001
peripherals: 0.001
arm: 0.001
mistranslation: 0.001
KVM: 0.000

OS started to crash with a message: "Trying to execute code outside RAM or ROM"

There is a project (https://github.com/narke/colorForth ) wich always worked with qemu up to version 2.5.1.1 but doesn't works from version 2.6 onwards. It continues to work with bochs.

Downlaod: git clone https://github.com/narke/colorForth.git
Build: make
Test: qemu-system-i386 -drive format=raw,file=cf2012.img,index=0,if=floppy


System information: Ubuntu LTS 16.04 x86-64
Affected qemu versions: 2.6 to present (2.8)


I got the message:


WARNING: Image format was not specified for 'cf2012.img' and probing guessed raw.
         Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted.
         Specify the 'raw' format explicitly to remove the restrictions.
qemu-system-i386: Trying to execute code outside RAM or ROM at 0x8998c426
This usually means one of the following happened:

(1) You told QEMU to execute a kernel for the wrong machine type, and it crashed on startup (eg trying to run a raspberry pi kernel on a versatilepb QEMU machine)
(2) You didn't give QEMU a kernel or BIOS filename at all, and QEMU executed a ROM full of no-op instructions until it fell off the end
(3) Your guest kernel has a bug and crashed by jumping off into nowhere

This is almost always one of the first two, so check your command line and that you are using the right type of kernel for this machine.
If you think option (3) is likely then you can try debugging your guest with the -d debug options; in particular -d guest_errors will cause the log to include a dump of the guest register state at this point.

Execution cannot continue; stopping here.


Thank you in advance.

The QEMU project is currently considering to move its bug tracking to another system. For this we need to know which bugs are still valid and which could be closed already. Thus we are setting all older bugs to
"Incomplete" now.
If you still think this bug report here is valid, then please switch the state back to "New" within the next 60 days, otherwise this report will be marked as "Expired". Thank you and sorry for the inconvenience.


[Expired for QEMU because there has been no activity for 60 days.]

