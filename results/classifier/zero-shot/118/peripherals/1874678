peripherals: 0.910
permissions: 0.757
device: 0.752
user-level: 0.744
hypervisor: 0.739
graphic: 0.726
risc-v: 0.715
PID: 0.709
virtual: 0.693
register: 0.693
semantic: 0.682
socket: 0.666
network: 0.640
performance: 0.635
boot: 0.634
assembly: 0.632
files: 0.615
VMM: 0.608
mistranslation: 0.605
debug: 0.598
arm: 0.596
TCG: 0.594
ppc: 0.569
architecture: 0.565
x86: 0.539
kernel: 0.537
vnc: 0.497
KVM: 0.479
i386: 0.425

[Feature request] python-qemu package

It would be useful to have the python/qemu/ files publish as a Python pip package, so users from distribution can also use the QEMU python methods (in particular for testing) without having to clone the full repository.

Hello, I am new to the community and I would like to cut my teeth with this bug. Is this a good starting point? If so, where should I be looking?

Hi, Rohit! I am actively involved in pursuing this at the moment. I have patches that do a lot of this work, but they are not complete and did not get merged in time for 5.1. I will have to update my development branches (soon) and share that code.

If you'd like to help, there are three main areas of consideration:

(1) I would like to ensure that all code in ./python/qemu is 100% pylint/mypy/flake8 compliant. I have many patches for this in particular. Once it's compliant, we need to prevent regressions: This task is less well defined in my head. Ideally the package is checked pythonically (via pytest, perhaps?) as well as via hooks in the QEMU source tree itself as a `make check-python` style target that can be checked from e.g. gitlab CI.

For now, the python package will live in the QEMU source tree, so it needs to function in both contexts simultaneously.

I consider this a requisite for packaging our SDK because it will help us prevent a certain class of regressions. By smoothing out the API and its typing in advance, the package will be less turbulent and, if needs be, easier to refactor with confidence in the future.


(2) The code itself needs packaging glue (setup.py et al.). I also have patches here that move ./python/qemu to ./python/qemu/core and installs this as a PEP-420 namespace package, 'qemu.core'. The idea was to add different QEMU modules over time -- possibly with different dependencies, etc.

One of the ideas is for everything in ./python to be checked using the same flake8/mypy/pylint regimes for consistency; but if we were to upload any packages to PyPI, I want to be able to upload them separately. e.g.

./python/qemu/core ==> PyPI "qemu"
./python/qemu/qapi ==> PyPI "qemu.qapi"

I didn't figure out how facilitate that just yet -- at the moment, any subpackages present in-tree get uploaded as part of the core API, and that's not what I wanted to do. Some subpackages we create are going to be ones we don't want to ever upload to PyPI, but having them in a standard package form will help with regression testing and development in-tree.


(3) Versioning is a complex topic and needs some consensus.

- Do we version the subpackages separately, or should they use the parent QEMU version?
- Should we release point fixes, or only release alongside official QEMU releases?
- How do we indicate beta status? If we release at version 5.2, people might expect SDK API stability, but we can't promise that yet!
- QEMU does not use semver, but Python ecosystem largely does. The QEMU deprecation policy may not mesh well with Python's expected behavior.

There's a lot there to think about before we push a package to PyPI. Pushing to PyPI, however, is not a requisite for accomplishing the first two tasks -- so we can shelf this for a little bit.


If you have some experience with python packaging and distribution and would like to help, let me know. You can sign up for the qemu development mailing list [1], and send a mail introducing yourself and CC the following folks:

John Snow <email address hidden>
Cleber Rosa <email address hidden>
Eduardo Habkost <email address hidden>

Thanks,
--js


[1] https://lists.gnu.org/mailman/listinfo/qemu-devel


This is an automated cleanup. This bug report has been moved
to QEMU's new bug tracker on gitlab.com and thus gets marked
as 'expired' now. Please continue with the discussion here:

 https://gitlab.com/qemu-project/qemu/-/issues/50


