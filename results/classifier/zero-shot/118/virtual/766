virtual: 0.975
x86: 0.957
TCG: 0.920
graphic: 0.824
performance: 0.772
semantic: 0.761
architecture: 0.707
device: 0.691
mistranslation: 0.673
vnc: 0.625
ppc: 0.577
PID: 0.534
kernel: 0.515
debug: 0.515
socket: 0.502
i386: 0.495
network: 0.485
files: 0.468
peripherals: 0.468
permissions: 0.456
VMM: 0.449
hypervisor: 0.432
register: 0.403
user-level: 0.399
risc-v: 0.385
boot: 0.380
arm: 0.343
assembly: 0.167
KVM: 0.121

qemu-system-x86_64: Reboot loop after Machine->Reset
Description of problem:
When using tcg, the virtual machine goes into a reboot loop after the VM
is rebooted through UI->Machine->Reboot menu, or through outb(0xcf9, 0xf).
There might be other reboot mechanisms that result in the same loop.

The loop doesn't occur when using kvm:
qemu-system-x86_64 -M q35 -enable-kvm
Steps to reproduce:
1. Run the command. (The one without -enable-kvm.)
2. From the UI, click on Machine->Reset.
3. See that the VM locks up, instead of resetting.
Additional information:
The reboot loop occurs because a variable defined by Seabios cannot be updated, possibly because the memory is read-only.

The variable in question is [HaveRunPost](https://github.com/coreboot/seabios/blob/2dd4b9b3f84019668719344b40dba79d681be41c/src/fw/shadow.c#L194). If HaveRunPost is non-zero, the BIOS follows the resume path. When the reset is clicked, the BIOS does indeed gain control and follow the resume path because HaveRunPost is 2. The control ends up at qemu_reboot, which should reset HaveRunPost to 0 and trigger another reset, so that this second time around, the BIOS sees HaveRunPost as 0, and follows the initialization path instead.

But, even though the instruction to update HaveRunPost seems to run, the value remains non-zero (2 to be exact).

```
        // HaveRunPost has value 2 here.
        barrier();
        HaveRunPost = 0;
        barrier();
        // If a dprintf(1, "%x\n", HaveRunPost); is placed here, the value printed is 2 and not 0!
        // With kvm-enabled, this dprintf prints 0.
```
