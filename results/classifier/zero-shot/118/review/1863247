architecture: 0.921
register: 0.753
device: 0.668
graphic: 0.540
semantic: 0.501
kernel: 0.468
performance: 0.452
risc-v: 0.396
mistranslation: 0.393
socket: 0.384
network: 0.383
arm: 0.366
x86: 0.352
vnc: 0.341
ppc: 0.316
debug: 0.315
virtual: 0.310
i386: 0.294
files: 0.269
boot: 0.254
assembly: 0.250
user-level: 0.242
VMM: 0.207
hypervisor: 0.206
permissions: 0.194
KVM: 0.178
peripherals: 0.175
PID: 0.162
TCG: 0.091
--------------------
architecture: 0.606
register: 0.400
assembly: 0.296
debug: 0.261
hypervisor: 0.041
TCG: 0.017
files: 0.014
virtual: 0.008
semantic: 0.005
kernel: 0.005
VMM: 0.004
network: 0.004
user-level: 0.003
performance: 0.002
KVM: 0.002
device: 0.002
risc-v: 0.002
PID: 0.002
peripherals: 0.001
vnc: 0.001
boot: 0.001
socket: 0.001
graphic: 0.001
permissions: 0.001
arm: 0.000
mistranslation: 0.000
ppc: 0.000
x86: 0.000
i386: 0.000

AArch64 EXT instruction for V register does not clear MSB side bits

On AArch64 CPU with SVE register, there seems to be a bug in the operation when executing EXT instruction to V registers. Bits above the 128 bits of the SVE register must be cleared to 0, but qemu-aarch64 seems to hold the value.

Example
ext v0.16b, v1.16b v2.16b, 8

After executing above instruction, (N-1) to 128 bits of z0 register must be 0, where N is SVE register width.

Yep.

Fixed here:
https://git.qemu.org/?p=qemu.git;a=commitdiff;h=78cedfabd53b


Thank you for bug fix.
I found trn1, trn2, zip1, zip2, uz1, uz2 instructions seem to have same bug.

All of those, and tbl, tbx, ins, are fixed in the three subsequent commits.

