architecture: 0.826
graphic: 0.818
semantic: 0.778
device: 0.724
performance: 0.683
vnc: 0.670
risc-v: 0.626
mistranslation: 0.614
ppc: 0.584
network: 0.574
kernel: 0.541
debug: 0.534
register: 0.504
boot: 0.489
PID: 0.418
permissions: 0.400
arm: 0.384
socket: 0.376
user-level: 0.354
peripherals: 0.348
virtual: 0.299
VMM: 0.286
TCG: 0.236
x86: 0.224
i386: 0.191
hypervisor: 0.185
files: 0.171
KVM: 0.046
assembly: 0.022
--------------------
user-level: 0.598
virtual: 0.176
debug: 0.169
hypervisor: 0.112
PID: 0.093
TCG: 0.028
register: 0.022
files: 0.018
arm: 0.008
semantic: 0.006
performance: 0.003
boot: 0.003
kernel: 0.003
architecture: 0.002
device: 0.002
peripherals: 0.001
network: 0.001
graphic: 0.001
permissions: 0.001
assembly: 0.001
risc-v: 0.001
socket: 0.001
x86: 0.001
ppc: 0.001
mistranslation: 0.000
VMM: 0.000
vnc: 0.000
i386: 0.000
KVM: 0.000

Invalid subprocess commands spawns successfully when running under QEMU
Description of problem:
When executing a subprocess from with a non-existing command EQMU still spawns a process.

Consider this small rust program for instance:
```rust
use std::process::Command;

fn main() {
    match Command::new("thisdoesnotexist").spawn() {
        Ok(child) => {
            println!("Child process id is {}", child.id());
        }
        Err(_) => {
            println!("This should happen");
        }
    }
}
```

**Executing with `qemu-aarch64`:**
```shell
qemu-aarch64 ./rust-app
Child process id is 20182
```

**Executing regularly:**
```shell
./rust-app
This should happen
```
