architecture: 0.901
register: 0.833
graphic: 0.770
device: 0.746
debug: 0.659
PID: 0.582
kernel: 0.575
ppc: 0.521
network: 0.517
user-level: 0.493
arm: 0.486
performance: 0.469
assembly: 0.416
vnc: 0.416
peripherals: 0.394
socket: 0.394
VMM: 0.346
semantic: 0.338
boot: 0.325
permissions: 0.322
KVM: 0.311
risc-v: 0.290
hypervisor: 0.288
files: 0.276
TCG: 0.259
mistranslation: 0.233
i386: 0.176
virtual: 0.169
x86: 0.122
--------------------
assembly: 0.499
debug: 0.425
architecture: 0.103
TCG: 0.096
register: 0.043
device: 0.041
files: 0.037
kernel: 0.034
arm: 0.029
PID: 0.025
hypervisor: 0.022
risc-v: 0.016
performance: 0.016
virtual: 0.014
semantic: 0.014
VMM: 0.012
peripherals: 0.012
socket: 0.008
vnc: 0.004
network: 0.003
ppc: 0.003
boot: 0.003
graphic: 0.003
user-level: 0.003
permissions: 0.002
mistranslation: 0.002
KVM: 0.001
x86: 0.001
i386: 0.000

AArch64 SVE2 LD/ST instructions segfault on MMIO addresses
Description of problem:
During execution of the following SVE2 instruction: `ld1b {z9.s}, p2/z, [x17, z26.s, sxtw]` with the following register state:
```
(gdb) p $x17
$1 = 0xffffffe2
(gdb) p $z26.s.u
$2 = {0x0 <repeats 16 times>}
(gdb) p $p2
$3 = {0xc4, 0x0, 0x9d, 0x0, 0xe5, 0x0, 0x83, 0x0, 0x80, 0xce, 0x3f, 0x3, 0x0, 0x0, 0x0, 0x0, 0x46, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x1a, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xd8, 0x96, 0xee, 0xfc, 0x7f, 0x0, 0x0, 0x50, 0xce, 0x94, 0x1, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xd8, 0x96, 0xee, 0xfc, 0x7f, 0x0, 0x0, 0x10, 0x38, 0x40, 0x3, 0x0, 0x0, 0x0, 0x0}
```
QEMU segfaults due to a null pointer access. Note that after translation this address is an MMIO address that points to a UART device.
Additional information:
A quick look at the implementation of the SVE2 load/store host memory access functions I've noticed that the `TLB_MMIO` flag is ignored in `sve_probe_page`, which means that users use the (null) host address as if it was pointing to real memory. This function (or the ones above it) should (probably) throw the appropriate external data abort, otherwise this needs to be instrumented to support reading from MMIO mapped devices.

<details><summary>Reproducer seed for my future self</summary>
S6008340160849309262|Q|cd4t|pq|w5|lK124
</details>
