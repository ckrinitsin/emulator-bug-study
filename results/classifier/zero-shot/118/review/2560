register: 0.903
permissions: 0.893
risc-v: 0.887
device: 0.884
performance: 0.883
architecture: 0.883
peripherals: 0.882
semantic: 0.881
mistranslation: 0.866
debug: 0.855
assembly: 0.847
user-level: 0.845
arm: 0.844
graphic: 0.842
socket: 0.841
TCG: 0.838
boot: 0.834
x86: 0.834
files: 0.826
virtual: 0.823
PID: 0.818
network: 0.804
VMM: 0.798
vnc: 0.797
ppc: 0.785
kernel: 0.742
hypervisor: 0.693
KVM: 0.650
i386: 0.447
--------------------
x86: 0.890
debug: 0.864
user-level: 0.214
assembly: 0.118
architecture: 0.105
performance: 0.071
PID: 0.062
files: 0.042
TCG: 0.040
virtual: 0.026
hypervisor: 0.011
semantic: 0.006
register: 0.006
kernel: 0.003
boot: 0.003
device: 0.002
graphic: 0.002
arm: 0.001
VMM: 0.001
permissions: 0.001
risc-v: 0.001
peripherals: 0.001
ppc: 0.001
mistranslation: 0.001
network: 0.001
KVM: 0.000
vnc: 0.000
socket: 0.000
i386: 0.000

Go garbage collector crashes when using qemu-x86_64 on an aarch64 host
Description of problem:
Apps compiled for Go and the Go compiler/tool itself crash when they are run with `qemu-x86_64` on an AARCH64 host system. This was not a problem on QEMU 8.2.x (I bisected, see further down). I also seem to recall that Go 1.21 is fine on QEMU 9.x, so maybe some recent change in Go 1.22 + recent changes in QEMU broke something?

The crash from Go seems to be in the garbage collector, I cannot reproduce the issue when I disable the GC with `GOGC=off`.

Output from Go when it crashes:

```
$ sudo chroot . go build main.go
runtime: lfstack.push invalid packing: node=0xffff6542b2c0 cnt=0x1 packed=0xffff6542b2c00001 -> node=0xffffffff6542b2c0
fatal error: lfstack.push

runtime stack:
runtime.throw({0xa95b29?, 0x797b1e2a383c?})
        runtime/panic.go:1023 +0x5c fp=0xc000515f08 sp=0xc000515ed8 pc=0x43c27c
runtime.(*lfstack).push(0x0?, 0xc0005041c0?)
        runtime/lfstack.go:29 +0x125 fp=0xc000515f48 sp=0xc000515f08 pc=0x40fd45
runtime.(*spanSetBlockAlloc).free(...)
        runtime/mspanset.go:322
runtime.(*spanSet).reset(0xf46980)
        runtime/mspanset.go:264 +0x79 fp=0xc000515f78 sp=0xc000515f48 pc=0x437219
runtime.finishsweep_m()
        runtime/mgcsweep.go:258 +0x8d fp=0xc000515fb8 sp=0xc000515f78 pc=0x42a6cd
runtime.gcStart.func2()
        runtime/mgc.go:685 +0xf fp=0xc000515fc8 sp=0xc000515fb8 pc=0x46e40f
runtime.systemstack(0x0)
        runtime/asm_amd64.s:509 +0x4a fp=0xc000515fd8 sp=0xc000515fc8 pc=0x47442a
````
Steps to reproduce:
0. Use an aarch64 host system!

1. Set up binfmt to use qemu-x86_64:

```
$ cat /proc/sys/fs/binfmt_misc/qemu-x86_64
enabled
interpreter /usr/bin/qemu-x86_64
flags: OCF
offset 0
magic 7f454c4602010100000000000000000002003e00
mask fffffffffffefe00fffffffffffffffffeffffff
```

2. Download/extract x86_64 rootfs:

```
$ curl -O https://dl-cdn.alpinelinux.org/alpine/v3.20/releases/x86_64/alpine-minirootfs-3.20.2-x86_64.tar.gz	
```

3. Create example app in the x86_64 rootfs:

```
package main

func main() {
}
```

4. Build using chroot:

```
$ sudo chroot /path/to/x86_64/rootfs apk add go
$ sudo chroot /path/to/x86_64/rootfs go build main.go
runtime: lfstack.push invalid packing: node=0xffff6542b2c0 cnt=0x1 packed=0xffff6542b2c00001 -> node=0xffffffff6542b2c0
fatal error: lfstack.push
...
```

5. As noted previously, if the Go garbage collector is disabled, then it works, presumably because it avoids the bug(?) in QEMU:

```
$ sudo chroot . env GOGC=off go build main.go
# might have to mount /dev to build successfully, but Go doesn't panic!
```
Additional information:
I've bisected this exact crash/failure to:

```
commit 2952b642a555207748dd961fcbfdc48f198eebb6
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Feb 13 10:20:27 2024 -1000

    linux-user: Split out do_munmap

    Reviewed-by: Philippe Mathieu-Daud√© <philmd@linaro.org>
    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
```

Though a different crash starts happening at the commit before that one:

```
commit ad87d26e6bb13257409f412224c862fc54025e8b
Author: Richard Henderson <richard.henderson@linaro.org>
Date:   Tue Jan 2 12:57:55 2024 +1100

    linux-user: Do early mmap placement only for reserved_va

    For reserved_va, place all non-fixed maps then proceed
    as for MAP_FIXED.

    Signed-off-by: Richard Henderson <richard.henderson@linaro.org>
```

FYI @rth7680
