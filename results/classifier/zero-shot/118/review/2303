assembly: 0.939
permissions: 0.905
graphic: 0.892
architecture: 0.888
peripherals: 0.887
files: 0.870
virtual: 0.869
register: 0.869
performance: 0.868
device: 0.859
semantic: 0.856
debug: 0.848
vnc: 0.846
hypervisor: 0.844
risc-v: 0.843
KVM: 0.842
arm: 0.838
socket: 0.831
PID: 0.815
kernel: 0.809
mistranslation: 0.807
TCG: 0.796
user-level: 0.788
ppc: 0.772
boot: 0.771
x86: 0.770
i386: 0.745
VMM: 0.715
network: 0.705
--------------------
kernel: 0.939
debug: 0.282
files: 0.204
user-level: 0.204
hypervisor: 0.203
x86: 0.142
virtual: 0.126
device: 0.097
KVM: 0.096
graphic: 0.086
TCG: 0.074
ppc: 0.045
i386: 0.033
risc-v: 0.024
VMM: 0.023
architecture: 0.017
PID: 0.016
assembly: 0.009
register: 0.008
boot: 0.005
performance: 0.005
semantic: 0.005
peripherals: 0.004
socket: 0.003
vnc: 0.003
arm: 0.003
permissions: 0.001
network: 0.001
mistranslation: 0.001

Multiple displays configuration supports
Additional information:
The following patch is a quick "hack" to make it work

```patch

From 18ad5058a18fa9f6db2c0c3058e25989908d95bb Mon Sep 17 00:00:00 2001
From: Sergio Lopez <slp@redhat.com>
Date: Fri, 23 Jun 2023 13:15:15 +0200
Subject: [PATCH 6/8] HACK: Set static resolutions for the VM

---
 hw/display/virtio-gpu-base.c | 10 +++++++++-
 ui/gtk.c                     |  6 ++++--
 2 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/hw/display/virtio-gpu-base.c b/hw/display/virtio-gpu-base.c
index a29f191aa8..b1ccfa17b7 100644
--- a/hw/display/virtio-gpu-base.c
+++ b/hw/display/virtio-gpu-base.c
@@ -47,6 +47,7 @@ virtio_gpu_base_fill_display_info(VirtIOGPUBase *g,
             dpy_info->pmodes[i].enabled = 1;
             dpy_info->pmodes[i].r.width = cpu_to_le32(g->req_state[i].width);
             dpy_info->pmodes[i].r.height = cpu_to_le32(g->req_state[i].height);
+            fprintf(stderr, "display %d: %dx%d\n", i, dpy_info->pmodes[i].r.width, dpy_info->pmodes[i].r.height);
         }
     }
 }
@@ -63,14 +64,17 @@ static void virtio_gpu_text_update(void *opaque, console_ch_t *chardata)
 {
 }
 
+#if 0
 static void virtio_gpu_notify_event(VirtIOGPUBase *g, uint32_t event_type)
 {
     g->virtio_config.events_read |= event_type;
     virtio_notify_config(&g->parent_obj);
 }
+#endif
 
 static void virtio_gpu_ui_info(void *opaque, uint32_t idx, QemuUIInfo *info)
 {
+#if 0
     VirtIOGPUBase *g = opaque;
 
     if (idx >= g->conf.max_outputs) {
@@ -94,6 +98,7 @@ static void virtio_gpu_ui_info(void *opaque, uint32_t idx, QemuUIInfo *info)
     /* send event to guest */
     virtio_gpu_notify_event(g, VIRTIO_GPU_EVENT_DISPLAY);
     return;
+#endif
 }
 
 static void
@@ -186,11 +191,14 @@ virtio_gpu_base_device_realize(DeviceState *qdev,
         virtio_add_queue(vdev, 16, cursor_cb);
     }
 
-    g->enabled_output_bitmask = 1;
+    g->enabled_output_bitmask = 3;
 
     g->req_state[0].width = g->conf.xres;
     g->req_state[0].height = g->conf.yres;
 
+    g->req_state[1].width = 800;
+    g->req_state[1].height = 600;
+
     g->hw_ops = &virtio_gpu_ops;
     for (i = 0; i < g->conf.max_outputs; i++) {
         g->scanout[i].con =
```
