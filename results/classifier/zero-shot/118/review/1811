ppc: 0.924
boot: 0.909
architecture: 0.819
graphic: 0.805
PID: 0.765
kernel: 0.719
device: 0.690
performance: 0.640
semantic: 0.626
peripherals: 0.545
debug: 0.511
vnc: 0.509
register: 0.504
risc-v: 0.459
network: 0.417
socket: 0.409
permissions: 0.381
VMM: 0.381
files: 0.375
user-level: 0.363
TCG: 0.356
arm: 0.347
assembly: 0.340
i386: 0.307
x86: 0.295
hypervisor: 0.240
virtual: 0.209
mistranslation: 0.150
KVM: 0.125
--------------------
debug: 0.942
user-level: 0.781
kernel: 0.715
boot: 0.347
ppc: 0.101
TCG: 0.074
PID: 0.056
performance: 0.026
files: 0.024
device: 0.021
VMM: 0.015
register: 0.014
network: 0.013
virtual: 0.012
peripherals: 0.008
semantic: 0.006
hypervisor: 0.005
socket: 0.005
graphic: 0.004
assembly: 0.003
architecture: 0.003
KVM: 0.001
x86: 0.001
vnc: 0.001
mistranslation: 0.001
risc-v: 0.001
arm: 0.001
permissions: 0.001
i386: 0.000

ppc serial appears to have a maximum ratio of output to input, hides output and only writes it on subsequent input(?!)
Description of problem:
When pasting in large chunks of text, the echo is partial, but completes with subsequent writes (and is drained when the writes are small). Sorry this is really stupid, see video.

(also, when booting, the console stops at
```
Building dt strings...
Building dt structure...
Device tree strings 0x00000000062c0000 -> 0x00000000062c0b90
Device tree struct  0x00000000062d0000 -> 0x00000000062e0000
Quiescing Open Firmware ...
Booting Linux via __start() @ 0x0000000002000000 ...
Linux ppc64le
#1 SMP Debian 6.
```
and then continues with more messages from just after the dot:
```
Linux ppc64le
#1 SMP Debian 6.[   15.683156] vio vio: uevent: failed to send synthetic uevent: -19
vio: Failed to write 'add' to '/sys/devices/vio/uevent', ignoring: No such device
/dev/vda2: clean, 17371/987360 files, 345018/3942144 blocks
```
)
Steps to reproduce:
1. `cat > /dev/null`
2. paste in a couple solid lines
3. observe that the echo completed mid-line
4. paste in a couple more solid lines
5. observe that the echo includes the end of the first few lines, and the start of the second set
6. ^D
7. observe that with every key input into the shell, you get a few bytes back, and those bytes are the tail-end of the second set of lines
8. when the echo buffer is drained, it's drained
Additional information:
Demo video: https://bugs.debian.org/cgi-bin/bugreport.cgi?att=1;bug=1041707;filename=2023-07-21+17-59-25.mp4;msg=5

Downstream bug: https://bugs.debian.org/1041707
