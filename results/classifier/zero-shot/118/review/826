register: 0.976
architecture: 0.965
graphic: 0.822
performance: 0.656
device: 0.639
mistranslation: 0.592
ppc: 0.546
debug: 0.513
network: 0.489
assembly: 0.432
semantic: 0.404
user-level: 0.308
hypervisor: 0.307
kernel: 0.268
vnc: 0.261
peripherals: 0.252
arm: 0.229
files: 0.228
PID: 0.215
socket: 0.178
virtual: 0.172
risc-v: 0.133
boot: 0.132
i386: 0.101
permissions: 0.097
x86: 0.080
VMM: 0.061
TCG: 0.048
KVM: 0.015
--------------------
debug: 0.908
assembly: 0.712
architecture: 0.304
TCG: 0.164
register: 0.103
files: 0.046
kernel: 0.040
hypervisor: 0.039
device: 0.025
PID: 0.023
risc-v: 0.013
VMM: 0.012
semantic: 0.012
performance: 0.010
virtual: 0.010
peripherals: 0.008
user-level: 0.007
vnc: 0.007
arm: 0.005
network: 0.004
boot: 0.003
ppc: 0.003
graphic: 0.003
permissions: 0.002
socket: 0.002
mistranslation: 0.001
KVM: 0.001
x86: 0.001
i386: 0.000

AArch64 SVE2 LDNT1SB (vector plus scalar) load address incorrectly calculated
Description of problem:
During execution of the following SVE2 instruction:
`ldnt1sb {z6.d}, p3/z, [z14.d, x9]`
with the following register state:
```
(gdb) p $p3
$1 = {0x7, 0x0, 0x74, 0x0, 0x43, 0x0, 0x29, 0x0, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0xe4, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x11, 0x31, 0x1, 0x0, 0x0, 0x0, 0x0, 0x20, 0x11, 0x31, 0x1, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x8b, 0x49, 0x34, 0xfc, 0x7f, 0x0, 0x0, 0xe0, 0x71, 0x30, 0x1, 0x0, 0x0, 0x0, 0x0}
(gdb) p $z14.d.u
$2 = {0x3bdeaa30, 0x3bdeaa33, 0x3bdeaa36, 0x3bdeaa39, 0x3bdeaa3c, 0x3bdeaa3f, 0x3bdeaa42, 0x3bdeaa45}
(gdb) p $x9
$3 = 0x0
```
QEMU produces a data abort due to an address fault on address `0x5EE45E4E`, which it clearly should not have tried to load.
Additional information:
A quick look at the implementation of the LDNT1SB instruction in QEMU points to the following commit: https://gitlab.com/qemu-project/qemu/-/commit/cf327449816d5643106445420a0b06b0f38d4f01 which simply redirects to SVE's LD1SB handler. As these instructions use a new flavor of SVE scatter/gather loads (vector plus scalar) which SVE LD1SB does not support, I wonder if the LD1SB handler simply decodes it as the wrong instruction and treats it as a (scalar plus vector) instruction, which LD1SB does support, but whose address calculation is completely different.
