architecture: 0.833
performance: 0.711
kernel: 0.675
user-level: 0.669
x86: 0.667
files: 0.648
peripherals: 0.633
socket: 0.629
permissions: 0.628
device: 0.625
arm: 0.615
network: 0.610
graphic: 0.599
debug: 0.595
virtual: 0.590
hypervisor: 0.568
risc-v: 0.559
semantic: 0.546
mistranslation: 0.517
PID: 0.513
ppc: 0.498
i386: 0.493
boot: 0.491
TCG: 0.479
vnc: 0.477
assembly: 0.473
register: 0.439
VMM: 0.437
KVM: 0.418
--------------------
debug: 0.919
x86: 0.200
user-level: 0.098
virtual: 0.046
PID: 0.024
performance: 0.009
TCG: 0.009
register: 0.006
files: 0.005
kernel: 0.003
hypervisor: 0.003
architecture: 0.003
semantic: 0.003
network: 0.002
device: 0.002
socket: 0.002
assembly: 0.001
VMM: 0.001
graphic: 0.001
boot: 0.001
vnc: 0.001
peripherals: 0.000
permissions: 0.000
arm: 0.000
mistranslation: 0.000
risc-v: 0.000
KVM: 0.000
ppc: 0.000
i386: 0.000

Intermittent buggines with user mode emulation of x86-64 on aarch64

QEMU Version: 5.0.0
./configure --target-list=x86_64-linux-user --enable-user --prefix=/opt/qemu --static

Testing using node_exporter from pmm-client-1.17.4-1.el8.x86_64.rpm

aarch64 system is running CentOS 8 with a mainline 5.4.52 kernel built for 4KB memory pages.

On aarch64 machine, invoke:

./qemu-x86_64-static /usr/local/percona/pmm-client/node_exporter.x86_64 -web.listen-address=192.168.0.10:42000 -web.auth-file=/usr/local/percona/pmm-client/pmm.yml -web.ssl-key-file=/usr/local/percona/pmm-client/server.key -web.ssl-cert-file=/usr/local/percona/pmm-client/server.crt -collectors.enabled=diskstats,filefd,filesystem,loadavg,meminfo,netdev,netstat,stat,time,uname,vmstat,meminfo_numa,textfile

Most of the time it will outright segfault within a few seconds, seemingly when the prometheus server polls for data.

But, about once every 10 times, it will not sefault and will continue working just fine forever.

The dynamically linked version of qemu (built without --static) always works without segfaulting, but it just doesn't work, the prometheus server gets no data from it. Again, once in a while it will work, but even when it doesn't work it won't segfault.

This vaguely feels like a memory alignment issue somewhere, but my debug-fu is not quite strong enough to attack the problem.

As another interesting data point - with dynamically linked qemu-x86_64, when it doesn't work, the process is consuming about 140% of CPU. On a successful run, the process is consuming about 30% of CPU.

The QEMU project is currently moving its bug tracking to another system.
For this we need to know which bugs are still valid and which could be
closed already. Thus we are setting the bug state to "Incomplete" now.

If the bug has already been fixed in the latest upstream version of QEMU,
then please close this ticket as "Fix released".

If it is not fixed yet and you think that this bug report here is still
valid, then you have two options:

1) If you already have an account on gitlab.com, please open a new ticket
for this problem in our new tracker here:

    https://gitlab.com/qemu-project/qemu/-/issues

and then close this ticket here on Launchpad (or let it expire auto-
matically after 60 days). Please mention the URL of this bug ticket on
Launchpad in the new ticket on GitLab.

2) If you don't have an account on gitlab.com and don't intend to get
one, but still would like to keep this ticket opened, then please switch
the state back to "New" within the next 60 days (otherwise it will get
closed as "Expired"). We will then eventually migrate the ticket auto-
matically to the new system (but you won't be the reporter of the bug
in the new system and thus won't get notified on changes anymore).

Thank you and sorry for the inconvenience.


[Expired for QEMU because there has been no activity for 60 days.]

