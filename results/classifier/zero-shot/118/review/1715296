mistranslation: 0.925
semantic: 0.735
device: 0.726
network: 0.676
peripherals: 0.655
performance: 0.589
ppc: 0.573
socket: 0.518
architecture: 0.495
graphic: 0.468
vnc: 0.466
register: 0.405
risc-v: 0.357
kernel: 0.351
hypervisor: 0.343
files: 0.332
i386: 0.327
virtual: 0.317
x86: 0.302
user-level: 0.302
PID: 0.300
permissions: 0.284
debug: 0.278
boot: 0.258
arm: 0.237
VMM: 0.199
TCG: 0.198
KVM: 0.141
assembly: 0.118
--------------------
hypervisor: 0.200
x86: 0.148
debug: 0.073
kernel: 0.048
TCG: 0.041
files: 0.038
device: 0.020
i386: 0.018
PID: 0.013
register: 0.013
network: 0.009
peripherals: 0.008
virtual: 0.007
user-level: 0.006
socket: 0.005
arm: 0.005
semantic: 0.003
assembly: 0.003
architecture: 0.002
performance: 0.002
ppc: 0.002
boot: 0.001
mistranslation: 0.001
graphic: 0.001
VMM: 0.001
permissions: 0.001
KVM: 0.001
vnc: 0.001
risc-v: 0.001

qemu: invalid serial port configuration

The tty_serial_init() function sets the port c_oflags as follows:
tty.c_oflag |= OPOST not clearing ONLCR, ONLRET and others.
The result is that the postprocess output is enabled and host translates 0xa (LF) to 0xd 0xa (CR LF) which breaks the binary transmissions on serial port even if you set the port to raw mode (no matters if on host and/or guest).
The issue has been reported 11 years ago on qemu-devel mailing list:
https://lists.nongnu.org/archive/html/qemu-devel/2006-06/msg00196.html
There was also a FreeBSD patch including the fix:
https://lists.freebsd.org/pipermail/freebsd-ports/2006-October/036390.html

I think the correct port configuration is:
tty.c_iflag &= ~(IGNBRK|BRKINT|PARMRK|ISTRIP|INLCR|IGNCR|ICRNL|IXON|IMAXBEL);
tty.c_oflag &= ~OPOST;

In such case the host will perform no output processing and will pass the data as is.
And the guest will be able to configure input/output processing exactly as it wants.

I believe the following bug is related: https://bugs.launchpad.net/qemu/+bug/1407813

Patch has now been committed here:
https://git.qemu.org/?p=qemu.git;a=commitdiff;h=12fb0ac0575df83cec72ec

