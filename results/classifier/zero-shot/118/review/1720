mistranslation: 0.979
graphic: 0.856
arm: 0.791
device: 0.768
performance: 0.736
architecture: 0.636
x86: 0.589
kernel: 0.586
peripherals: 0.584
PID: 0.578
ppc: 0.564
VMM: 0.453
register: 0.451
hypervisor: 0.441
semantic: 0.435
permissions: 0.431
network: 0.426
socket: 0.400
debug: 0.389
boot: 0.380
user-level: 0.372
i386: 0.310
assembly: 0.306
KVM: 0.296
risc-v: 0.295
virtual: 0.291
TCG: 0.251
vnc: 0.194
files: 0.122
--------------------
arm: 0.850
kernel: 0.539
virtual: 0.239
device: 0.092
debug: 0.053
architecture: 0.036
TCG: 0.024
files: 0.020
PID: 0.019
VMM: 0.017
semantic: 0.015
hypervisor: 0.013
register: 0.012
boot: 0.010
peripherals: 0.010
assembly: 0.008
user-level: 0.007
KVM: 0.007
vnc: 0.005
performance: 0.005
socket: 0.004
risc-v: 0.004
network: 0.003
ppc: 0.002
permissions: 0.002
graphic: 0.002
x86: 0.001
mistranslation: 0.001
i386: 0.001

Problems in mapping memory regions in multiple machines using GPEX pci-host
Description of problem:
Multiple machines use the GPEX pci-host model. This model forsees 3 MMIO regions:
1. ECAM space
2. MMIO space
3. IO space

In the different machines, aliases to the 3 memory regions are created which are then mapped onto the sysbus. 

For the ARM virt machine for example following calls are happening:

    ecam_alias = g_new0(MemoryRegion, 1);
    ecam_reg = sysbus_mmio_get_region(SYS_BUS_DEVICE(dev), 0);
    memory_region_init_alias(ecam_alias, OBJECT(dev), "pcie-ecam", ecam_reg, 0, size_ecam);
    memory_region_add_subregion(get_system_memory(), base_ecam, ecam_alias);

    mmio_alias = g_new0(MemoryRegion, 1);
    mmio_reg = sysbus_mmio_get_region(SYS_BUS_DEVICE(dev), 1);
    memory_region_init_alias(mmio_alias, OBJECT(dev), "pcie-mmio", mmio_reg, base_mmio, size_mmio);
    memory_region_add_subregion(get_system_memory(), base_mmio, mmio_alias);

We now add a generic PCIe root port (gen_pcie_root_port.c) on the PCIBus exposed by the GPEX device:

    pci_create_simple(PCI_HOST_BRIDGE(dev)->bus, -1, "pcie-root-port");

This device contains an MSI-x table which is accessible via BAR 0.

However, if we try to access this space we always get 0xFFFFFFFF as a return value on reads because the memory regions are not correctly mapped IMO. 

If we again look at the mapping of the MMIO space:

    memory_region_init_alias(mmio_alias, OBJECT(dev), "pcie-mmio", mmio_reg, base_mmio, size_mmio);
    memory_region_add_subregion(get_system_memory(), base_mmio, mmio_alias);

The alias is created to the MMIO region in the GPEX device, at offset base_mmio. Afterwards the memory region alias is mapped onto the sysbus at offset base_mmio. To me it seems that the offset is incorrect in creating the alias and should be 0 instead:

    memory_region_init_alias(mmio_alias, OBJECT(dev), "pcie-mmio", mmio_reg, 0, size_mmio);
    memory_region_add_subregion(get_system_memory(), base_mmio, mmio_alias);

With this change the above scenario (accessing the MSI-x table of the generic PCIe root port) is working. I'm not sure if this is the correct fix for this problem and how to cope with e.g. high MMIO regions (as are also present in the virt machine).
