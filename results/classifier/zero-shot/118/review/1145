register: 0.946
architecture: 0.929
i386: 0.858
debug: 0.846
graphic: 0.755
semantic: 0.722
device: 0.660
arm: 0.558
socket: 0.541
x86: 0.536
performance: 0.478
network: 0.439
files: 0.438
peripherals: 0.436
PID: 0.388
ppc: 0.386
vnc: 0.378
kernel: 0.347
mistranslation: 0.336
TCG: 0.268
boot: 0.261
permissions: 0.237
VMM: 0.231
assembly: 0.199
user-level: 0.176
hypervisor: 0.156
KVM: 0.088
virtual: 0.086
risc-v: 0.050
--------------------
ppc: 0.828
debug: 0.692
files: 0.540
register: 0.383
KVM: 0.329
arm: 0.193
VMM: 0.156
TCG: 0.150
i386: 0.145
kernel: 0.114
risc-v: 0.044
semantic: 0.026
virtual: 0.015
architecture: 0.014
assembly: 0.012
PID: 0.007
user-level: 0.006
performance: 0.006
device: 0.005
hypervisor: 0.003
x86: 0.003
boot: 0.002
graphic: 0.002
network: 0.002
vnc: 0.001
peripherals: 0.001
socket: 0.001
permissions: 0.001
mistranslation: 0.001

Support register name resolution in debugger part of monitor for `x` commands for ARM platforms
Additional information:
From the looks of `get_monitor_def()` function from `monitor/misc.c` it seems to be cross-target but somehow still doesn't work for some targets anyway.

Then grepping for the actual target implementation, it seems only i386, PPC, SPARC, and M68K support it, but nor ARM, MIPS, RISC V, etc:
```
[i] â„¤ rg monitor_defs                                                                                                                                                                                       
target/sparc/monitor.c
59:const MonitorDef monitor_defs[] = {
162:const MonitorDef *target_monitor_defs(void)
164:    return monitor_defs;

target/ppc/monitor.c
86:const MonitorDef monitor_defs[] = {
102:const MonitorDef *target_monitor_defs(void)
104:    return monitor_defs;

target/i386/monitor.c
611:const MonitorDef monitor_defs[] = {
647:const MonitorDef *target_monitor_defs(void)
649:    return monitor_defs;

target/m68k/monitor.c
25:static const MonitorDef monitor_defs[] = {
59:const MonitorDef *target_monitor_defs(void)
61:    return monitor_defs;
```
