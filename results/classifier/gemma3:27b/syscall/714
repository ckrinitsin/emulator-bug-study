


Command line arguments are not passed correctly with user-space semihosting
Description of problem:
The emulated process always receives a value of 1 for `argc`, with `argv[0]` returning seemingly random characters (in Ubuntu packaged qemu 5.2), but correlating with command-line input (output below from master built qemu 6.1):
```
$ qemu-arm -cpu cortex-m7 ./a.out 123 test
argc: 1
argv: 
 - @@@

$ qemu-arm -cpu cortex-m7 ./a.out 
argc: 1
argv:
 [0] @
```
Steps to reproduce:
1. Compile the following program with [ARM embedded toolchain](https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads):
```cpp
#include <iostream>

int main(int argc, char* argv[]) {
	std::cout << "argc: " << argc << "\n";
	std::cout << "argv: \n";

	for (int i = 0; i < argc; i++)
		std::cout << " [" << i << "] " << argv[i] << "\n";
	return 0;
}
```

```
$ $CXX --version
arm-none-eabi-g++ (GNU Arm Embedded Toolchain 10-2020-q4-major) 10.2.1 20201103 (release)
Copyright (C) 2020 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

$ $CXX main.cpp --specs=rdimon.specs -mcpu=cortex-m7
```

2. Run in user-space (semihosted):
```
$ qemu-arm -cpu cortex-m7 ./a.out 
```
