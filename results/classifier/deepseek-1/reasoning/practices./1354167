<think>
Okay, so I'm trying to figure out how to fix an issue with my Virtual Machine (VM) after upgrading from Ubuntu 12.04 to 14.04. The problem is that when I tried using `qemu-img` on a running VM, it caused some corruption in the disk image. This made the VM unstartable, and now I'm looking for a way to recover.

First, I remember reading somewhere that you shouldn't use `qemu-img` while the VM is running because both processes might be accessing the same disk image simultaneously, leading to conflicts and corruption. But since this happened already, I need to fix it.

I saw some people mentioning a workaround where they used an older version of `qemu-img`, specifically v1.7.2, which worked for them. Maybe compiling that version can help me too. I'm not sure how to do that, but let's see if I can figure it out step by step.

So, the user 'Rob Schultz' provided a compiled binary, but it only works under Proxmox 3.3. I'm on Ubuntu 14.04 now, so maybe compiling my own `qemu-img` would be better. The user mentioned installing several packages like autoconf, automake, etc., and then configuring and making the project.

I'll try to follow that process. First, I need to install all the dependencies:

```
sudo apt-get install autoconf automake autopoint autotools-dev dh-autoreconf libltdl-dev libtool m4 libglib2.0-0-dbg  libglib2.0-bin libglib2.0-dev libpcre3-dev libpcrecpp0
```

Wait, the user said they could have just done `autoconf` instead of `dh-autoreconf`. Maybe I can skip that to avoid confusion.

After installing these packages, I need to download the QEMU source code. Let me find the right version—probably v1.7.2—to compile `qemu-img`.

Once the source is downloaded and extracted, I'll run:

```
./configure
make
```

But the user said that after installing `libglib2.0-0-dbg`, they had to re-run `./configure`. Maybe I should do that as well.

After compiling, I can find the `qemu-img` binary in the build directory. Let's say it's under `build/qemu/img/`.

I'll copy this binary to a safe location and test it on my VM image. The process is to convert the corrupted image back to a good state:

```
./qemu-img convert bad.qcow2 fixed.qcow2
```

If this works, I should have a new, uncorrupted QCOW2 image that my VM can start without issues.

But wait, what if compiling `qemu-img` takes too long? The user said they killed the make process after building the binary. Maybe I can speed things up by using `make -jN` where N is the number of cores to utilize parallel builds. That might save some time.

Also, I should ensure that my VM is completely shut down before running any `qemu-img` commands on its disk image. Running the VM while modifying the image could cause more corruption or other issues.

Another thought: Maybe there's a way to use another tool besides `qemu-img` for managing snapshots. The user mentioned using the QEMU monitor or libvirt functions, which might be safer. But since I'm already in this situation, fixing with `qemu-img` is probably my best bet.

I should also check online if this specific issue has been resolved in newer versions of QEMU. Maybe it's a known bug that's fixed now, so using the latest `qemu-img` might prevent such problems in the future.

In summary, the steps I need to take are:

1. Install necessary build dependencies.
2. Download and extract the QEMU source code for v1.7.2.
3. Configure and compile `qemu-img`.
4. Use the compiled binary to convert my corrupted image to a new one.
5. Test if the VM starts successfully with the new image.

I think following these steps should help me recover my VM without too much hassle. Hopefully, it works as it did for others who had similar issues.
</think>

To resolve the issue of a corrupted VM disk image after using `qemu-img` on a running VM, follow these structured steps to compile an older version of `qemu-img` and recover your VM:

### Steps to Fix Corrupted VM Disk Image

1. **Install Dependencies:**
   - Open your terminal and run the following command to install necessary build tools and libraries:
     ```bash
     sudo apt-get install autoconf automake autopoint autotools-dev libltdl-dev libtool m4 libglib2.0-0-dbg libglib2.0-bin libglib2.0-dev libpcre3-dev libpcrecpp0
     ```

2. **Download QEMU Source Code:**
   - Download the source code for QEMU version 1.7.2 from the official [QEMU Download Page](https://www.qemu.org/download/). Extract the downloaded tarball to a directory of your choice.

3. **Configure and Compile `qemu-img`:**
   - Navigate to the extracted source directory.
   - Run the configuration script:
     ```bash
     ./configure --enable-qed --enable-qcow2
     ```
   - Compile the source code with parallel builds for efficiency:
     ```bash
     make -j$(nproc)
     ```
   - After compilation, locate the `qemu-img` binary. It should be in the `build/qemu/img/` directory.

4. **Convert Corrupted Image:**
   - Use the compiled `qemu-img` to convert the corrupted image to a new, uncorrupted QCOW2 file:
     ```bash
     ./qemu-img convert /path/to/bad.qcow2 /path/to/fixed.qcow2
     ```
   - Replace `/path/to/bad.qcow2` with your actual corrupted image path and specify an appropriate output location.

5. **Test the VM:**
   - After converting, attempt to start your VM using the new image file.
   - Ensure that the VM is completely shut down before performing any `qemu-img` operations in the future to avoid further corruption.

6. **Consider Upgrading QEMU:**
   - Check if newer versions of QEMU address this issue. Update your system packages or compile a newer version of `qemu-img` for future use.

By following these steps, you should be able to recover your VM and prevent similar issues in the future by avoiding the use of `qemu-img` on running VMs and ensuring proper image management practices.