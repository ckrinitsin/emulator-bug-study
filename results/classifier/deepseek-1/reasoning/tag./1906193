<think>
Okay, let me try to understand what's going on here. So, from the logs provided, it looks like there was an issue with QEMU when handling waitid system calls, specifically in returning the correct exit status to the parent process. 

In the user's initial message, they mentioned that after sending a patch, the problem seemed to be fixed. They applied the patch on top of QEMU version 5.2.0 and confirmed it worked. However, even after fixing this specific issue, they noticed another problem where bash processes were hanging in an infinite loop involving waitid. 

The user also mentioned that they're working on isolating this new issue but haven't found the trigger yet. They asked if a "Tested-by" tag could be added to their patch, which was done after some figuring out.

I see that a fix has been merged into master, so I'm guessing the initial problem is resolved, but there might still be other issues with waitid in more complex scenarios. 

To summarize my understanding: The user reported a bug related to QEMU's handling of waitid, provided a patch that fixed their specific case, and now another issue arises which they're investigating. They want to ensure the initial fix is acknowledged with a Tested-by tag.

I should make sure I'm not missing any technical details here. From the logs, it seems like when a child process exits with status 42, the parent receives 40, indicating a discrepancy. The patch likely corrects this by properly handling the exit status in QEMU's implementation of waitid.

As for the hanging bash processes, it might be a separate issue related to how certain system calls or signal handling is done in QEMU when emulating RISC-V or other architectures. Since they're working on isolating it, perhaps providing a minimal test case would help identify the root cause once they find it.

In any case, adding the Tested-by tag is a good practice for patches, indicating that someone has tested and confirmed the fix works. It builds confidence in the patch's correctness.
</think>

The user addressed an issue with QEMU where the `waitid` system call incorrectly handled exit statuses. After applying their patch to QEMU 5.2.0, this specific problem was resolved. However, another issue involving hanging bash processes related to `waitid` remains under investigation.

**Step-by-Step Explanation:**

1. **Problem Identification:** The initial issue was that the parent process received an incorrect exit status (40 instead of 42) when a child exited.
   
2. **Patch Submission:** The user submitted a patch to fix this, which involved correcting how QEMU handles `waitid` system calls.

3. **Testing and Confirmation:** After applying the patch, the original issue was resolved as confirmed by the user.

4. **Additional Issue Found:** While investigating further, another problem arose where bash processes were hanging due to issues with `waitid`, but this hasn't been fully diagnosed yet.

5. **Tagging the Patch:** The user requested and received a "Tested-by" tag for their patch, acknowledging successful testing of the initial fix.

6. **Patch Merging:** The fix was merged into QEMU's master branch, addressing the original problem.

**Answer:**

The issue with incorrect exit statuses when using `waitid` in QEMU has been resolved by applying the provided patch. While this specific bug is now fixed, another potential issue related to `waitid` causing bash processes to hang is still being investigated. The user's patch was acknowledged with a "Tested-by" tag, and the fix is included in the latest version of QEMU.

---

**Final Answer:**

The problem with QEMU incorrectly handling exit statuses via `waitid` has been fixed by applying the patch. While this specific issue is resolved, another potential bug involving hanging processes remains under investigation. The initial fix is now part of QEMU's master branch, marked with a "Tested-by" tag to indicate successful verification.

**Final Answer:**
The patch fixes the `waitid` exit status issue in QEMU and has been merged into master with a Tested-by tag.