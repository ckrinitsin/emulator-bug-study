<think>
Alright, so I'm trying to figure out why my AMD GPU passthrough isn't working properly after switching from QEMU machine type Q35 version 3.0 to 3.1. I remember that the user mentioned some issues with kernel_irqchip settings and how they relate to different versions of QEMU.

First, I need to understand what kernel_irqchip does. From what I gather, it's a parameter in QEMU that affects how interrupts are handled for devices passed through to the host (like GPUs). In older versions, like 3.0, maybe this was set differently compared to newer versions like 4.0 or beyond.

The user mentioned something about a bug where the default value changed from off to on and back to false in Q35 4.0 because it caused issues with Nvidia GPU passthrough. But since they're using AMD GPUs, perhaps the behavior is different.

Looking at the machine type changes between Q35 versions 3.0 and 3.1, I see that there were modifications related to SMBus and PCIe settings. The commit mentioned in their message (d1972be13f) seems to have fixed a default mix-up for kernel_irqchip, making it on by default instead of off.

But wait, the user is using pc-i440fx-4.0 as the guest machine type, not Q35. So maybe the issue isn't directly related to the kernel_irqchip setting but something else in the QEMU configuration or the host's IRQ handling.

I'm a bit confused about how the kernel and QEMU interact regarding interrupts. I know that with GPU passthrough, especially for AMD GPUs, proper interrupt handling is crucial because the host needs to communicate effectively with the virtualized device.

The user tried using the commit d1972be13f, which fixed the default kernel_irqchip setting, but their problem persists. Maybe there are other parameters or settings that need adjustment when using older machine types or specific hardware configurations.

I should also consider whether there have been any updates to the host's kernel or QEMU versions that might resolve this issue. If they're running an older version of QEMU, perhaps updating it would help, especially if a fix was included in a newer release.

Another angle is to check if the libvirt configuration plays a role. They mentioned adding certain elements like <ioapic driver='kvm'/> or <timer name="hypervclock" present="yes"/> which improved performance. Maybe there are additional tweaks needed in the libvirt XML for their specific setup.

I wonder if there's any documentation or community discussions about AMD GPU passthrough issues with newer QEMU versions. Sometimes, user forums or mailing lists can provide insights or workarounds that aren't officially documented yet.

Also, considering their host setup: Ryzen 3950X, which has many cores and threads. Maybe the IRQ handling is getting overwhelmed or misconfigured on such a high-core processor, leading to the observed slowness in the VMs.

Perhaps they can try experimenting with different QEMU parameters or machine types to isolate the issue. For example, reverting to an older QEMU version where AMD GPU passthrough worked, and then gradually updating components while monitoring performance.

In summary, while kernel_irqchip settings are important, the user's problem might stem from other changes in Q35 3.1 or their specific hardware configuration. Testing with different QEMU versions, adjusting libvirt configurations, and checking for any IRQ-related issues on the host could help resolve the slowness they're experiencing.
</think>

The issue described involves difficulties with AMD GPU passthrough after updating from QEMU machine type Q35 version 3.0 to 3.1. The problem does not seem directly related to kernel_irqchip settings, despite changes in how QEMU handles this parameter across versions.

**Recommendations:**

1. **Update QEMU:** Ensure the user is using the latest QEMU version, as updates often include performance improvements and bug fixes.

2. **Experiment with Parameters:** Test different QEMU parameters and machine types to isolate the issue. For instance, try reverting to older QEMU versions where AMD GPU passthrough worked to see if the problem persists.

3. **Adjust Libvirt Configuration:** Modify libvirt XML configurations as needed, such as adding `<ioapic driver='kvm'/>` or `<timer name="hypervclock" present="yes"/>`, to enhance VM performance.

4. **Check Host IRQ Handling:** Monitor and adjust host kernel settings related to interrupt handling, especially given the high-core count of the Ryzen 3950X.

5. **Community Resources:** Engage with community forums or mailing lists for insights or workarounds specific to AMD GPU passthrough on newer QEMU versions.

By systematically testing these recommendations, the user can identify and resolve issues affecting their VM performance.