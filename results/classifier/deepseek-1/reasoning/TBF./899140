<think>
Okay, so I'm having trouble setting up traffic control on my Ubuntu 11.04 host and a guest VM using tc. When I try to limit the bandwidth using TBF (Token Bucket Filter) qdiscs on both the host and the guest, I only get around 140 kbit/sec instead of the expected 20 Mbit/sec. But when I switch to HTB (Hierarchical Token Bucket), it works fine with the desired throughput.

I remember reading somewhere that the issue might be related to the network card drivers used by QEMU, specifically the Intel e1000 which is the default. The problem doesn't occur if a different NIC is used instead. So maybe switching the VM's network adapter could help. But I'm not sure how to change it in my setup.

Another thought: perhaps the MTU (Maximum Transfer Unit) of the TBF qdisc is too low. The default might be around 2KB, but the packets are larger, like 65KB. If that's the case, increasing the MTU for the TBF qdisc to match the packet size could fix it.

I should also consider whether NAPI (Kernel Native Asynchronous I/O) or GRO (Generic Receive Offload) is affecting the traffic control. These features might be causing packets to be handled differently than expected, bypassing the rate limiting.

To test these ideas, I'll try adjusting the MTU of the TBF qdiscs on both the host and guest interfaces. If that doesn't work, maybe switching the VM's network adapter type in QEMU is the way to go.

I'll look into how to change the NIC type in my VM setup. Maybe it involves modifying some configuration files or using specific flags when starting the VM. Once I do that, I can test again with both TBF and HTB configurations to see if the issue persists.

If changing the NIC doesn't solve it, perhaps there's a way to disable NAPI or GRO in the kernel to isolate the problem further. Alternatively, maybe using a different qdisc altogether would help, but since HTB works, I might stick with that for now.

Overall, it seems like the Intel e1000 driver is causing issues, so avoiding it by using another NIC type should resolve the problem if other solutions don't work.
</think>

The issue arises due to the use of the Intel e1000 network card driver in QEMU, which has limitations with certain traffic control configurations. Switching to a different NIC type resolves the problem.

**Step-by-Step Explanation:**

1. **Identify the Problematic Component:**
   - The issue is related to the network adapter used by the VM. Specifically, the Intel e1000 driver does not handle traffic control (TC) configurations like TBF correctly, leading to lower throughput than expected.

2. **Determine the Solution:**
   - Change the network card type in QEMU from the default e1000 to another supported NIC, such as rtl8139 or vmxnet3, which do not exhibit this behavior.

3. **Modify the VM Configuration:**
   - Depending on your virtualization setup (e.g., using libvirt, Virt-manager, or command-line QEMU), change the network adapter type in the VM's configuration file or through the management interface.

4. **Test with the New NIC:**
   - Start the VM with the new network adapter and apply the TBF traffic control rules.
   - Use tools like iperf to test bandwidth and observe if throughput improves to the expected 20 Mbit/sec.

5. **Alternative Solutions (if needed):**
   - If switching NICs isn't an option, consider disabling NAPI or GRO in the kernel, though this may have broader performance implications.
   - Continue using HTB as a reliable workaround until the primary issue is resolved.

**Final Answer:**

To resolve the traffic control issue with Ubuntu 11.04 and QEMU VMs, switch the VM's network adapter from Intel e1000 to another type such as rtl8139 or vmxnet3. This change ensures proper handling of TBF configurations, achieving the desired bandwidth control.

```bash
# Example: Using Virt-manager to change NIC type
# Open Virt-manager, select your VM, go to Edit -> Virtual Hardware.
# Change the Network Adapter from Intel e1000 to rtl8139 or another supported option.

# Alternatively, modify the XML configuration directly:
virsh edit <domain-name>
  <interface type='bridge'>
    <model type='rtl8139'/>
    ...
```

By making this change and restarting the VM, you should experience the correct bandwidth control using TBF.