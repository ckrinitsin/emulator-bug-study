<think>
Okay, I need to classify this bug report from QEMU into one of the given categories: mistranslation, assembly, other, device, graphic, socket, network, KVM, boot, vnc, debug, files, permissions, performance, kernel, peripherals, hypervisor.

The bug is about the signal mask not being reset on exec. The issue arises in net/tap.c's launch_script function, which doesn't reset the signal mask before calling execv(). This means that the child process inherits the blocked signals from QEMU, specifically SIGALRM. Because of this, when a script like ping is run, it can't handle its timeout correctly because SIGALRM is blocked.

Looking at the categories, 'signal' handling isn't directly listed. The closest related areas might be 'kernel' since signal handling is part of the OS kernel interaction, or perhaps 'other' if none of the specific categories fit.

The problem occurs during process execution and involves signals, which are a part of the operating system's process management. Since it's not specifically about device drivers, graphics, sockets, or network protocols (though network is involved in this case, it's more about signal handling), I think 'kernel' might be appropriate because it relates to how processes interact with the kernel's signal mechanisms.

Alternatively, since it's a signal-related issue that affects process execution and isn't directly tied to any of the other specific categories like network or device, 'other' could also make sense. However, considering that signals are part of the OS kernel functions, 'kernel' seems more precise.
</think>

network