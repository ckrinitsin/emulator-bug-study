<think>
Okay, so I'm trying to figure out why the pc register isn't updating correctly when using the execlog plugin in QEMU. From what the user mentioned, they expect that with or without the `-one-insn-per-tb` option, the output should be consistent because each instruction changes the PC.

Looking at the provided code snippets and the documentation, it seems like the issue might be related to how the plugin reads registers. The `insn_check_regs()` function in `execlog.c` uses `qemu_plugin_read_register()`, which might not always return the updated value immediately after an instruction is executed. 

I remember that in QEMU, when you set up a Translation Block (TB), if `-one-insn-per-tb` is enabled, each instruction is its own TB. Otherwise, multiple instructions are grouped into one TB for efficiency. This could affect how the plugin handles register changes.

So, maybe without `-one-insn-per-tb`, after executing an instruction, the PC hasn't been updated yet when `insn_check_regs()` tries to read it. Because in a single TB with multiple instructions, the PC is only updated once at the end of the TB processing. Therefore, all the instructions in that TB would share the same initial PC until the next TB starts.

The user noticed that the PC value doesn't change as expected when not using `-one-insn-per-tb`. That makes sense because each instruction's PC isn't being captured individually; instead, it's just the start of the next TB. So, if you have multiple instructions in one TB, only the first and last PC values would be accurate for that block.

To fix this, enabling `-one-insn-per-tb` ensures that each instruction is handled separately, allowing the PC to update correctly after each step. Alternatively, modifying the plugin to read the PC after every instruction within a TB might also help, but I'm not sure how feasible that is without more code changes.

In summary, it's likely a limitation of how the plugin interacts with QEMU's translation blocks. Splitting into single instructions per TB would resolve the issue since each step gets its own PC update.
</think>

The behavior you're observing is due to how QEMU handles Translation Blocks (TB) when using the execlog plugin. Here's a breakdown of why this happens and how to address it:

### Explanation:
- **Translation Blocks (TB):** QEMU processes code in chunks called TBs for efficiency. Each TB can contain multiple instructions.
- **`-one-insn-per-tb`:**
  - **Enabled:** Each instruction is its own TB, ensuring the PC updates after every instruction.
  - **Disabled:** Multiple instructions are grouped into a single TB. The PC only updates once at the end of the TB, causing all instructions in that block to share the same initial PC value.

### Impact on PC Updates:
- Without `-one-insn-per-tb`, `insn_check_regs()` reads the PC before it's updated for subsequent instructions within the same TB, leading to repeated or incorrect PC values.
- With `-one-insn-per-tb`, each instruction triggers a new TB, allowing accurate PC updates.

### Solution:
To ensure that the PC register is correctly captured after each instruction, use the `-one-insn-per-tb` option. This forces QEMU to process each instruction individually, ensuring the PC updates as expected for each step.

### Conclusion:
The issue isn't with your plugin code but rather how QEMU processes TBs. Enabling `-one-insn-per-tb` will provide the desired behavior of capturing each instruction's PC correctly.