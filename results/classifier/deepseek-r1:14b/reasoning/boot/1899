<think>
Okay, so I've got this bug report related to QEMU and an issue with AArch64 systems. The problem is about the SCR_EL3 register being incorrectly set after enabling secondary cores via PSCI. Let me try to understand what's going on here.

First, the user describes that when using direct kernel boot with EL3 enabled, turning on secondary cores through PSCI leads to incorrect SCR_EL3 setup. This causes an endless loop of "Undefined Instruction" exceptions on CPU 1. Looking at the logs, it seems like the system is failing to handle certain exceptions correctly after the secondary cores are activated.

The user mentions that when only one CPU is used (-smp 1), it works fine, but with two CPUs (-smp 2), it fails. This points towards an issue related to how multiple CPUs are handled, specifically during their initialization or reset process.

They also explain that SCR_EL3 setup is done by do_cpu_reset in hw/arm/boot.c, which only runs on full system resets. However, when PSCI enables secondary cores, it calls arm_set_cpu_on_async_work in target/arm/arm-powerctl.c, which then calls cpu_reset. This seems to reset the CPU but doesn't handle all the necessary flags that do_cpu_reset does.

The problem arises because when using PSCI to bring up additional CPUs asynchronously, the current code doesn't correctly set up SCR_EL3 as it would during a full system reset. The user suggests making do_cpu_reset public so that arm_set_cpu_on_async_work can call it, but they're unsure if that's the best approach.

Now, I need to classify this bug into one of the provided categories. Let's look at the possible options: mistranslation, assembly lowering, device, graphic, socket, network, KVM, boot, vnc, debug, files, permissions, performance, kernel, peripherals, hypervisor, or other.

The issue is related to how CPUs are being reset and their registers set up after enabling secondary cores. This seems more about the system's behavior during boot and CPU initialization rather than something specific like network or graphic issues. The mention of PSCI and EL3 suggests it's dealing with exception levels in the kernel, which ties into system-level operations.

Looking at the categories, "boot" seems relevant because the problem occurs when bringing up secondary CPUs during the boot process. However, the issue is more about how the CPUs are being reset after being turned on, which might fall under "kernel." Alternatively, since it's related to CPU setup and exception handling in EL3, maybe "hypervisor" could be a fit.

But considering that the primary failure point is during the boot process when enabling secondary cores, I think the most appropriate category is "boot." It directly relates to how the system initializes after certain components are added post-boot.
</think>

The bug report describes an issue where enabling secondary cores via PSCI leads to incorrect setup of SCR_EL3, causing a boot failure. The problem occurs during the system's initialization process when additional CPUs are brought up, leading to undefined instruction exceptions.

**Step-by-Step Explanation:**

1. **Understanding the Problem:** The system fails to boot correctly when using direct kernel boot with EL3 enabled and multiple CPUs. Secondary cores, when activated via PSCI, have an incorrect SCR_EL3 value, causing trapped instructions in EL3 and an infinite loop of exceptions on CPU 1.

2. **Identifying Keywords:** Keywords include "PSCI," "SCR_EL3," "secondary cores," "boot failure," and exception handling in AArch64 (EL3). These indicate issues during system initialization and CPU management.

3. **Analyzing Affected Components:** The problem arises from how CPUs are reset after being enabled, particularly regarding register setup. The function `do_cpu_reset` correctly initializes SCR_EL3 on full resets but isn't called when PSCI brings up additional cores asynchronously.

4. **Determining the Category:** Since the issue occurs during the boot process and involves CPU initialization and exception handling crucial for system stability, it fits under "boot." It's about how the system initializes components post-reset, especially with multiple CPUs.

**Answer:**
boot