<think>
Alright, I'm trying to figure out why my VM isn't starting properly when using a custom-built QEMU. Let's walk through what happened.

First, I built QEMU 3.0 from source with the --enable-rbd option. That should allow it to support RBD (RADOS Block Device) storage, which is necessary for Ceph integration. Then, I realized that maybe the initial build was missing some configuration options, so I decided to rebuild QEMU using the configure parameters from CentOS 7's qemu-kvm package version 1.5.3-175.el7. This package is known to work well with KVM and might have additional features or security settings needed.

I carefully noted all the configure flags used in the CentOS package, including things like --enable-seccomp, --disable-xen, and various block driver options. Incorporating these into my build should make my QEMU more compatible with the system's existing setup and improve functionality, especially for virtualization tasks.

After rebuilding, I replaced the old QEMU binary with the new one in /usr/local/qemu-3.0/bin/qemu-system-x86_64. However, when I tried starting the VM via virsh, it got stuck during booting from the hard disk. This suggests that there might be a compatibility issue or missing feature in my custom-built QEMU.

Then, as an experiment, I replaced the path in the libvirtd XML file to use /usr/libexec/qemu-kvm instead of my built version. Surprisingly, this worked, and the VM started up without issues. This tells me that the system's existing qemu-kvm (from the CentOS package) is functioning correctly, while my custom-built QEMU isn't.

So, why did my custom build fail? Let's consider possible reasons:

1. **Missing or Incorrect Configure Flags**: Even though I included many of the same flags as the CentOS package, perhaps there was a flag I missed that affects device support or boot processes.

2. **Build Environment Differences**: The system might have certain libraries or headers required by QEMU that were present during the CentOS build but missing in my custom setup. For example, if I didn't install all necessary development packages before building, some features might not be properly linked.

3. **Patch Level Differences**: The CentOS package might include additional patches or security fixes that aren't part of the 3.0 release. If my build is based purely on the 3.0 source without these patches, it could cause issues.

4. **ABI Incompatibility**: There might be changes in the Application Binary Interface (ABI) between QEMU versions that affect how libvirt or other components interact with it.

5. **Configuration Differences**: The way the XML configuration is parsed or the features enabled during build time could lead to different behavior when using my custom QEMU versus the system package.

To resolve this, I should check which configure flags were used in the CentOS package and ensure they're all included in my custom build. Also, verifying that all dependencies are properly installed and that the build environment matches what's expected for a working KVM/QEMU setup would be crucial.

Another approach could be to run QEMU with increased verbosity or debugging options to capture more detailed output when it fails to start. This might provide clues about which part of the boot process is getting stuck, such as issues with device drivers, storage initialization, or GPU passthrough if that's configured.

In summary, while my custom-built QEMU 3.0 includes RBD support and some additional flags from the CentOS package, it seems to lack something that the system's qemu-kvm provides. Reverting to the system package temporarily works but isn't a long-term solution. I need to identify exactly what's missing in my build configuration to make the custom QEMU function correctly.
</think>

The issue arises because the custom-built QEMU binary lacks certain features or configurations present in the system's pre-installed qemu-kvm, causing the VM to fail during boot. To resolve this:

**Step-by-Step Explanation:**

1. **Identify Missing Configure Flags:** Review all configure flags used by the CentOS package and ensure they're included in your custom build. Pay attention to features like seccomp, kvm support, and block drivers.

2. **Check Build Dependencies:** Ensure all required libraries and development packages are installed. These might include libvirt, spice-server, SDL, and others necessary for QEMU functionality.

3. **Rebuild with Correct Flags:** Re-run the configure script with all relevant flags from the CentOS package to match its configuration as closely as possible.

4. **Test the Build:** After rebuilding, test the QEMU binary thoroughly in a controlled environment before replacing the system's qemu-kvm.

5. **Debug Failed Boots:** If issues persist, run QEMU with verbose logging (`-v` option) or use tools like `strace` to identify where the boot process is failing.

6. **Consider Using the System Package for Critical Features:** Until the custom build is verified and functioning, using the system's qemu-kvm ensures a stable environment for VM operations.

**Answer:**

The problem lies in missing configuration flags or dependencies during your QEMU rebuild, causing compatibility issues with libvirt or other system components. To fix this:

1. **Rebuild QEMU:** Re-run the configure script with all necessary flags to match the CentOS package's setup.
   ```bash
   ./configure --enable-seccomp --disable-xen --enable-kvm --enable-rbd ...
   ```

2. **Install Dependencies:** Ensure all required packages are installed, such as `libvirt-devel`, `spice-server-devel`, and others.

3. **Test the Build:** Use the rebuilt QEMU in a test environment to confirm it works correctly before switching your VMs to use it.

4. **Debug if Necessary:** Use verbose logging or debugging tools to pinpoint where the boot process fails.

By addressing these steps, you can create a custom QEMU that functions properly with libvirt and supports all necessary features for your VM setup.