
Enabling SVM in guest forcefully enables hypervisor flag and doesn't respect hv-vendor-id
Description of problem:
When the SVM cpu feature is enabled in a guest; despite both the hypervisor feature being disabled and hv-vendor-id being set to AuthenticAMD, the guest hypervisor is detected as "Microsoft Hv" and the hypervisor flag is present. Whereas when the SVM cpu feature is disabled but everything else is still the same, the vendor-id is detected as "AuthenticAMD" and the hypervisor flag isn't present, which is exactly as it was intended by the parameters. Therefore, from what I can tell, enabling the SVM cpu feature (which is necessary for nested-virtualization on AMD CPUs) renders hypervisor=off and hv-vendor-id useless by forcefully enabling the hypervisor flag and setting the hypervisor's vendor-id to the default "Microsoft Hv", which normally shouldn't happen.
Steps to reproduce:
1. Run a Windows 11 virtual machine with the given CLI arguments including svm=on
2. I'm not sure how to check the hypervisor vendor from Command Prompt or PowerShell in Windows, so I used [Paranoid Fish](https://github.com/a0rtega/pafish) to check the hypervisor vendor, it's a utility for checking various different VM detection flags in a guest.
3. You should see "Hypervisor: Microsoft Hv"
Additional information:
Screenshot of Paranoid Fish with SVM enabled:

![svm_enabled.png](/uploads/1ea311d526c4d761cc734cc0daf9614e/svm_enabled.png){width="291" height="86"} ("Hypervisor:" is visible, meaning "-hypervisor" was ignored)

![svm_enabled_hypervisor.png](/uploads/61262cfb6f6c2867b9c20c663fa704d3/svm_enabled_hypervisor.png){width="369" height="13"} (traced means the hypervisor bit is present, meaning `hypervisor=off` was ignored)

And with SVM disabled:

![image.png](/uploads/4a7b7812193c4303e930543a036bfa8f/image.png) ("Hypervisor:" isn't visible, as intended)

![svm_disabled_hypervisor.png](/uploads/94fadbef1e168ace8f32923b3ca92ea9/svm_disabled_hypervisor.png){width="339" height="12"} (OK means the hypervisor bit isn't present, as intended)

# Solution

I finally found a solution to this. And it looks like the problem might not even have been on QEMU's side from the beginning. First disabling Virtualization Based Security (Memory Integrity) from settings and then running the following command: `bcdedit /set hypervisorlaunchtype off` in an admin PowerShell fixes the issue and now with SVM enabled, regardless of whether Hyper-V is enabled or not, I see the following CPU information in Paranoid Fish (identical to when SVM was disabled and everything is as intended, and I can still see that virtualization is enabled in task manager):

![image.png](/uploads/f7cc24c201ad2a6c1ff5a98623e3235b/image.png)

![image.png](/uploads/f3257f420d72fcd3a95ee45b1d9e24a0/image.png)

It looks like for some odd reason Windows enables the hypervisor bit on the CPU and sets the hypervisor's vendor-id to "Microsoft Hv" when SVM is enabled in the VM. No clue as to why it does that, but disabling Virtualization Based Security (Memory Integrity) and running the command I mentioned earlier in an admin PowerShell fixes the problem regardless.
