

Invalid subprocess commands spawns successfully when running under QEMU
Description of problem:
When executing a subprocess from with a non-existing command EQMU still spawns a process.

Consider this small rust program for instance:
```rust
use std::process::Command;

fn main() {
    match Command::new("thisdoesnotexist").spawn() {
        Ok(child) => {
            println!("Child process id is {}", child.id());
        }
        Err(_) => {
            println!("This should happen");
        }
    }
}
```

**Executing with `qemu-aarch64`:**
```shell
qemu-aarch64 ./rust-app
Child process id is 20182
```

**Executing regularly:**
```shell
./rust-app
This should happen
```
