<think>
Okay, so I have this problem where a C++ program is causing memory leaks when run on QEMU-PPC, but it's fine when running natively on PowerPC hardware or when compiled for Intel. The user provided a code example that creates 100 threads and joins them in two consecutive calls to Fun100(). They noticed that the memory usage keeps increasing each time they call this function.

First, I need to understand why this is happening. Memory leaks usually occur when allocated memory isn't properly deallocated. But since it's working fine on real hardware, it suggests that the issue might be specific to QEMU's environment or how it handles threading and memory management.

The code uses std::thread, which under the hood probably interacts with the operating system's thread management. Since this is happening in user space (the application layer), the issue isn't related to kernel-level operations but rather how the user-mode components are interacting within QEMU.

QEMU-PPC emulates a PowerPC environment. When running applications on it, especially multithreaded ones, there could be issues with thread management or memory handling in the emulator itself. Maybe the way QEMU handles context switching or thread creation is causing some resources not to be properly released when the threads are joined.

The fact that this doesn't happen on native PowerPC or Intel suggests that it's something specific to how QEMU-PPC emulates threading and memory allocation, possibly a bug in the emulator's user-mode emulation.

So, considering all this, the problem is likely related to user-mode operations within QEMU. It's not an issue with hardware peripherals or system-level components like the kernel but rather how the userland code (the application) interacts with the emulated environment.
</think>

user