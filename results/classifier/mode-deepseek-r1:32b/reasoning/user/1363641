<think>
Okay, I need to classify this bug report as either 'user-mode' related or 'system-mode' related. Let me start by understanding the problem.

The user is building QEMU version 2.1.0 and encountering errors during compilation on an armv7l architecture. The specific errors are about undeclared symbols like __NR_select, __NR_mmap, etc., in qemu-seccomp.c. They also mention that this happens both for v2.1.0 and the master branch.

I know that seccomp is involved here, which stands for secure computing mode. Seccomp is used to restrict the system calls a process can make, enhancing security by reducing potential attack vectors. In QEMU, seccomp filters are applied to the qemu process to limit its capabilities.

Looking at the errors, they're about missing __NR_* constants. These constants usually correspond to system call numbers. For example, __NR_select is the system call number for the select() function, which is used in system programming to check if I/O is possible on a file descriptor without blocking.

In user-mode emulation, QEMU emulates the instruction set of different CPUs and runs unmodified guest OSes as userspace processes under the host OS. However, when using seccomp filters, QEMU needs to know which system calls are allowed or blocked for the process. The __NR_* constants are used in these filters.

So, the issue arises because the qemu-seccomp.c file is trying to use these system call numbers but they aren't declared anywhere. This suggests that either the headers on the build system don't define them, or there's a missing include that should provide these definitions.

Now, considering whether this is user-mode related: User-mode deals with emulating guest CPUs and handling their execution in userspace of the host. Seccomp here is part of the QEMU process's own security setup, not directly about emulating guests. However, seccomp filters are crucial for both system and user-mode as they control what the qemu process can do.

But wait, when running in user mode (like running a Linux guest under a Linux host without KVM), the seccomp filters help prevent the qemu process from making certain syscalls that could be security risks. The missing __NR_* constants are part of the system call definitions needed for these filters. So this is about QEMU's own operation and security, which affects both user and system modes.

However, since the problem occurs during the build process when compiling QEMU itself, it might be related to how QEMU interacts with the host's kernel or libraries. The __NR_* constants are typically defined in <asm/unistd.h> or similar headers. If the build environment is missing these definitions, it could indicate an issue with cross-compiling or header files not being properly included.

But given that this error occurs on a specific architecture (armv7l) and possibly due to how the host's headers are set up, it might relate more to system-level setup rather than user-mode specifics. However, since the bug is within QEMU's codebase when building with seccomp support, it could be an issue in how QEMU includes these definitions.

In any case, since seccomp is part of the security layer for the qemu process, which runs as a userspace application even when running in system mode (with KVM), but in user-mode without KVM, it's still a userspace process. The missing symbols are part of the system call filtering setup.

Therefore, this bug seems to be related to QEMU's own security mechanisms when building on a specific architecture, which would fall under user-mode considerations because seccomp is used to restrict the qemu process's system calls in userspace.
</think>

user