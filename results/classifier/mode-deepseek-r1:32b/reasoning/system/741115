<think>
Okay, so I need to classify this bug report into either 'user-mode' or 'system-mode'. Let me start by understanding what the user is asking for. They want support in an embedded GDB server to expose ARM coprocessor registers like cp15 and cp14.

First, I recall that in ARM architecture, coprocessors are used for specific functions. Cp14 is often associated with floating-point operations, while cp15 handles system-level tasks such as cache control and MMU management. So, accessing these registers typically requires higher privileges because they deal with system-wide settings and hardware components.

The user mentioned that this relates to QEMU, which is a system emulator. System emulators usually run in a higher privilege mode to emulate the entire system, including devices and peripherals. If the GDB server needs to expose these coprocessor registers, it likely requires access to system-level resources, which are managed at a lower level than user applications.

I also see that they filled a bug in GDB, specifically about QEMU. Since QEMU emulates hardware, any changes there would affect how the entire system runs, including device drivers and the operating system. This suggests it's not just about running an application but about the underlying system infrastructure.

Furthermore, handling coprocessor registers isn't something user-mode applications typically do because they don't have the necessary privileges. These operations are usually handled by the kernel or in a privileged environment. Therefore, modifying GDB to expose these registers would fall under system-level changes.

Putting it all together, supporting ARM coprocessor registers like cp15 and cp14 in an embedded GDB server for QEMU involves interacting with lower-level hardware components and requires higher privileges, making this a system-mode issue.
</think>

system