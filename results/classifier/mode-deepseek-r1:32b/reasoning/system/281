<think>
Okay, I need to classify this bug report about QEMU into either 'user-mode' or 'system-mode'. The issue mentioned is related to Go 1.15 on s390x with problems in checksum and ECDSA verification when using external modules.

First, understanding what user-mode vs system-mode entails. User-mode issues typically involve application-level problems, such as crashes, bugs within the program itself, or issues that affect how a user interacts with the software. System-mode relates to lower-level operations like hardware interactions, device drivers, operating system functions, and privilegesâ€”essentially anything that involves the interaction between the software and the underlying system.

In this case, the problem is about module retrieval which suggests it might involve fetching modules from an external source, possibly over a network or from storage. The mention of checksum and ECDSA verification points to security aspects related to verifying the integrity and authenticity of these modules. QEMU itself is an emulator that runs in user space by default, but when dealing with things like module retrieval, especially if it involves lower-level operations or interacting with device drivers, it could touch on system-mode issues.

However, considering that Go 1.15's external module retrieval might be a higher-level issue, perhaps related to how the application fetches dependencies. This could be more about the build process or dependency management within the user space of QEMU. The checksum and ECDSA errors might indicate problems with verifying modules during this retrieval process, which is part of the application's operation.

But since module retrieval can sometimes involve system-level operations like network calls, file I/O, or cryptographic checks that interact with kernel services, it could also fall under system-mode. However, the primary issue here seems to be within Go's handling of these modules rather than direct hardware interactions.

Given that QEMU is a user-space application and the problem pertains to module retrieval and verification which are part of the software's functionality without necessarily involving high-privilege operations or peripherals directly, this might lean towards user-mode. However, since it involves cryptographic verification and could interact with system libraries for such purposes, there's some ambiguity.

I'm leaning more towards 'system' because cryptographic operations often involve system-level functions, especially when dealing with security aspects like ECDSA verification. Additionally, module retrieval may require accessing external resources which can be system-dependent.
</think>

system