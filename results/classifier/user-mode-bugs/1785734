

movdqu partial write at page boundary

In TCG mode, when a 16-byte write instruction (such as movdqu) is executed at a page boundary and causes a page fault, a partial write is executed in the first page. See the attached code for an example.

Tested on the qemu-3.0.0-rc1 release.


% gcc -m32 qemu-bug2.c && ./a.out && echo && qemu-i386 ./a.out
*(0x70000ff8+ 0) = aa
*(0x70000ff8+ 1) = aa
*(0x70000ff8+ 2) = aa
*(0x70000ff8+ 3) = aa
*(0x70000ff8+ 4) = aa
*(0x70000ff8+ 5) = aa
*(0x70000ff8+ 6) = aa
*(0x70000ff8+ 7) = aa
*(0x70000ff8+ 8) = 55
*(0x70000ff8+ 9) = 55
*(0x70000ff8+10) = 55
*(0x70000ff8+11) = 55
*(0x70000ff8+12) = 55
*(0x70000ff8+13) = 55
*(0x70000ff8+14) = 55
*(0x70000ff8+15) = 55
page fault: addr=0x70001000 err=0x7
*(0x70000ff8+ 0) = aa
*(0x70000ff8+ 1) = aa
*(0x70000ff8+ 2) = aa
*(0x70000ff8+ 3) = aa
*(0x70000ff8+ 4) = aa
*(0x70000ff8+ 5) = aa
*(0x70000ff8+ 6) = aa
*(0x70000ff8+ 7) = aa
*(0x70000ff8+ 8) = 55
*(0x70000ff8+ 9) = 55
*(0x70000ff8+10) = 55
*(0x70000ff8+11) = 55
*(0x70000ff8+12) = 55
*(0x70000ff8+13) = 55
*(0x70000ff8+14) = 55
*(0x70000ff8+15) = 55

*(0x70000ff8+ 0) = aa
*(0x70000ff8+ 1) = aa
*(0x70000ff8+ 2) = aa
*(0x70000ff8+ 3) = aa
*(0x70000ff8+ 4) = aa
*(0x70000ff8+ 5) = aa
*(0x70000ff8+ 6) = aa
*(0x70000ff8+ 7) = aa
*(0x70000ff8+ 8) = 55
*(0x70000ff8+ 9) = 55
*(0x70000ff8+10) = 55
*(0x70000ff8+11) = 55
*(0x70000ff8+12) = 55
*(0x70000ff8+13) = 55
*(0x70000ff8+14) = 55
*(0x70000ff8+15) = 55
page fault: addr=0x70001000 err=0x6
*(0x70000ff8+ 0) = 77
*(0x70000ff8+ 1) = 66
*(0x70000ff8+ 2) = 55
*(0x70000ff8+ 3) = 44
*(0x70000ff8+ 4) = 33
*(0x70000ff8+ 5) = 22
*(0x70000ff8+ 6) = 11
*(0x70000ff8+ 7) = 0
*(0x70000ff8+ 8) = 55
*(0x70000ff8+ 9) = 55
*(0x70000ff8+10) = 55
*(0x70000ff8+11) = 55
*(0x70000ff8+12) = 55
*(0x70000ff8+13) = 55
*(0x70000ff8+14) = 55
*(0x70000ff8+15) = 55