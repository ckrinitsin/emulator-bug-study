<think>
Okay, I need to classify this bug report into one of three categories: instruction, syscall, or runtime. Let me read through the problem description carefully.

The issue is about getresuid() returning incorrect uid values when run in a big-endian sparc64 guest under QEMU. The user provided an example where UID 0x000003e8 becomes 0x03e80000, which looks like a byte-swapping issue.

From the steps to reproduce, they're compiling and running code that uses getresuid(). They mention it doesn't happen outside QEMU, so it's likely related to how QEMU handles something. The problem occurs when calling getresuid(), which is a system call.

Looking at possible causes: since this affects a system call, it might be an issue in how QEMU translates or handles that particular syscall. Alternatively, maybe the glibc implementation within QEMU isn't handling endianness correctly, but since they mention it's part of QEMU, I should focus there.

So, considering the problem is with getresuid(), which is a syscall, and the error occurs in the context of QEMU emulating that call. Therefore, this falls under the 'syscall' category because the issue arises when making a system call within the emulator.
</think>

The bug report describes an incorrect handling of the getresuid() system call, leading to byte-swapping issues. This is related to how the syscall is implemented or translated by QEMU.

syscalls