<think>
Alright, I'm trying to figure out how to classify this bug report about QEMU. The issue is that when using command line arguments with user-space semihosting on an ARM Cortex-M7, the program doesn't receive them correctly. Instead of getting multiple arguments, it only gets argc as 1 and argv[0] shows random or incorrect characters.

First, I'll read through the problem description again. The user provided a C++ program that prints out argc and each argv element. When they run it with QEMU using command line arguments like "qemu-arm -cpu cortex-m7 ./a.out 123 test", the output shows argc as 1, which is wrong because there are two additional arguments. Similarly, when no extra args are passed, it still gets one argument but with incorrect data.

The program was compiled with the ARM embedded toolchain for Cortex-M7 and uses rdimon.specs, which I think relates to semihosting support in QEMU. The issue seems specific to how QEMU handles command line arguments in this setup.

Looking at the possible categories: instruction, syscall, runtime. Instruction would be about faulty CPU instructions, which doesn't seem relevant here. Syscall issues relate to system calls not working as expected. Runtime is for other errors during execution.

This problem isn't a fault with an instruction or a system call; it's more about how QEMU is handling the command line arguments during runtime when in user-space semihosting mode. The program expects the arguments to be passed correctly, but they aren't, which suggests a runtime issue rather than a syscall failure.

So I think this falls under 'runtime' because it's an error occurring while the program is executing, specifically related to how QEMU manages the environment and argument passing in semihosted mode.
</think>

The bug report describes an issue where command-line arguments are not passed correctly during runtime when using user-space semihosting with QEMU. This is a runtime error rather than an instruction or syscall problem.

runtime