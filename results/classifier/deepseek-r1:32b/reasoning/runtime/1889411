<think>
Okay, so I'm trying to figure out how to classify this bug report about QEMU and RISC-V. The user provided a detailed example where using GDB with QEMU isn't able to unwind the stack upon signals like SIGABRT, SIGSEGV, or SIGILL. When they trigger these signals in their test program, instead of getting a proper backtrace, GDB just shows an unresolved address.

First, I'll read through the problem again. They have a C program with several levels of function calls leading to an abort(). When running under QEMU and attaching GDB, the initial breakpoint works fine and gives a clear backtrace. But when the signal is actually triggered (like SIGABRT), GDB can't unwind the stack and only shows ?? in the backtrace.

The user mentions that this behavior doesn't happen on real hardware and speculates that QEMU's signal handling might be different from the Linux kernel. They also reference a GDB issue related to RISC-V, suggesting it's more of an environment-specific problem rather than a compiler or GDB bug per se.

Looking at the categories provided: instruction, syscall, runtime. I need to determine which one fits best. The issue doesn't seem to be about a specific faulty instruction being executed; it's more about how signals are handled during runtime. It also doesn't directly involve a problem with system calls themselves but rather the signal handling mechanism.

So, considering this, the bug is related to how QEMU handles signals at runtime when debugging with GDB. Therefore, it falls under the "runtime" category because it's an error that occurs during program execution, specifically in the way QEMU manages signals and stack unwinding.
</think>

The issue arises during runtime due to improper signal handling by QEMU, preventing stack unwinding.

runtime