<think>
Alright, I'm trying to figure out why this binary runs fine on real hardware but not in QEMU. The user mentioned it's an aarch64 binary that prints "hello, world" and exits, which works on actual hardware but loops forever in QEMU using 100% CPU.

First, the binary is statically linked, so it doesn't depend on external libraries. That probably means the issue isn't with shared libraries or system calls related to dynamic linking. It uses OCaml, which I'm not super familiar with, but I know it's a functional programming language that compiles to bytecode and then runs via an interpreter.

The user provided steps to compile OCaml from source, noting that you have to compile it on aarch64 or in QEMU because cross-compilation isn't possible. They also mentioned applying a patch. Maybe the issue is related to how the OCaml runtime interacts with QEMU's emulation.

When the binary runs under QEMU, it doesn't print anything and loops, which suggests some kind of infinite loop or hang. Since it uses 100% CPU, it's likely stuck in a loop without progressing. This could be due to a bug in how QEMU handles certain instructions or system calls related to OCaml's runtime.

I'm thinking about possible categories: instruction, syscall, runtime. The problem might not be with a specific instruction because real hardware runs fine. It also doesn't seem like a syscall issue since the binary is static and probably doesn't rely heavily on syscalls beyond standard ones. So, maybe it's a runtime error in QEMU.

Perhaps the OCaml runtime uses certain features or instructions that aren't properly handled by QEMU. Maybe there are some optimizations or specific instruction sequences that cause QEMU to misbehave. Since the user said applying a patch was necessary during compilation, perhaps the issue relates to how QEMU emulates the CPU or handles certain operations.

Another angle: static linking might have different behaviors in emulation versus real hardware, but I'm not sure. The fact that it works on hardware suggests the binary is correct, so the problem must lie in the emulator's handling of something during runtime.

So, putting this together, the issue seems to be a runtime error within QEMU when executing this specific binary. It's probably related to how the emulator handles certain operations or instructions used by the OCaml runtime.
</think>

runtime