<think>
Okay, let's see. The user is having a problem where QEMU is core-dumping when running an ARM program. The issue seems to be related to the entry symbol. Let me break this down.

First, the user compiled a simple "Hello World" program using arm-linux-gnu-gcc. They used the -nostdlib option and linked with -lc. The linker warns that it can't find the entry symbol _start, defaulting to some address. Then when running with QEMU, it prints "Hello World" but then gets an illegal instruction error, leading to a core dump.

In the second case, when they explicitly link with crt1.o, crti.o, and crtn.o, it works. Those CRT files are part of the C runtime and provide the _start symbol, which is the entry point for the program. So the first case, without those files, the linker isn't finding _start, so it uses a default. That probably means the program isn't properly set up with the correct entry point, leading to QEMU executing invalid instructions when trying to start the program.

The error here is that without the CRT objects, the program's entry point is incorrect. The illegal instruction (signal 4) suggests that QEMU is trying to execute code at an address that isn't valid for the ARM architecture. Since the entry symbol is missing, the linker picks a default, which might not be aligned properly or might point to a location that doesn't contain valid ARM instructions. This results in QEMU trying to execute invalid instructions, hence the illegal instruction error.

The categories given are instruction, syscall, or runtime. The problem here is that the program's entry point is incorrect, leading to invalid instructions being executed. So the root cause is a faulty instruction due to the missing entry symbol. Therefore, this should be classified under 'instruction'.
</think>

instruction