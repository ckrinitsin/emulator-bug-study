<think>
Okay, let's try to figure out what's going on here. The user is reporting an issue with QEMU where, when a signal like SIGABRT is triggered in a RISC-V program, GDB can't unwind the stack properly. The problem doesn't happen on real hardware, and they suspect QEMU's signal handling is different from the actual Linux kernel.

Looking at the code, they have a chain of function calls leading to abort(), which sends a SIGABRT. When they hit a breakpoint before abort, the backtrace works. But when they let it proceed, the signal is delivered, and GDB can't show the stack trace. The same issue happens with SIGSEGV and SIGILL.

The possible categories are instruction, syscall, or runtime. 

First, instruction would mean the CPU is executing an incorrect instruction. But the problem here is about signal handling and stack unwinding, not an incorrect instruction. So probably not instruction.

Syscall would involve system calls. The program uses abort(), which calls a syscall to raise the signal. But the problem is when the signal is delivered and the stack isn't unwound. Maybe the problem is in how QEMU handles the signal delivery, which involves system calls for signal handling. However, the issue seems more about how the signal is processed, not a direct syscall error. 

Runtime errors are other issues that occur during program execution, not directly related to syscalls or instructions. Since the problem is about the stack unwinding when signals are handled, which depends on the runtime environment (like QEMU's emulation of the signal handling mechanism), this might be a runtime issue. The QEMU's runtime handling of signals might not be setting up the stack or registers correctly for the debugger to unwind the stack. 

The user mentioned that on real hardware it works, but QEMU isn't. So QEMU's emulation of the signal handling process (which is part of its runtime behavior) is likely the culprit. Therefore, this would be a runtime category issue.
</think>

runtime