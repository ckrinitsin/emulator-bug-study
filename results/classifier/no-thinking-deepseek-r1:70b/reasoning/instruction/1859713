The issue revolves around the behavior of ARM v8.3 pauth instructions (specifically `paciasp` and `autiasp`) within QEMU, where these instructions are not functioning as expected when tested on an Ubuntu 19.10 x86_64 machine using a specific version of QEMU. The problem seems to be related to how QEMU handles the computation and verification of Pointer Authentication Codes (PACs), particularly concerning truncation issues that affect the authentication process.

The user has provided detailed test scenarios, including specific values for LR before and after corruption, as well as PAC outputs with corresponding `bot_bit` and `top_bit` results. These details suggest that there is an error in how QEMU's implementation of these instructions handles certain edge cases or truncation scenarios, leading to incorrect authentication success when it should fail.

Given this context, the issue clearly points to a problem within the implementation of the ARM v8.3 pauth instructions themselves within QEMU. The focus is on instruction-level functionality rather than system calls or general runtime errors.

**instruction**