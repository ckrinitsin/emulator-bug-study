CodeBuffer management long-term planning
#4479 is laying the ground work to restructure CodeBuffer handling for on-disk code caching, however there are more changes that are worth working on in the future.

Here's a list of ideas:
* [ ] Preserve old CodeBuffer data on resize by relocation
* [ ] Detect and discard stale CodeBuffer versions more eagerly (i.e. before new code is compiled)
* [ ] Use dedicated CodeBuffer for ephemeral compilation (TSO automigration, SMC, TF, CompileSingleStep)
* [ ] Re-enable parallel compiler backend operation by compiling to temp CodeBuffer and relocating it
* [ ] Use smarter underlying CodeBuffer data structures to share memory allocations between versions
* [ ] Improve code invalidation logic for self-modifying code (currently will just keep growing the buffers)
