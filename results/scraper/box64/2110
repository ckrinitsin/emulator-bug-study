[LA64_DYNAREC] Disable another execution test when pagesize is not 4K regression
Hi,

Reproduced:
```
./build/box64 /yourpath/x64-jdk23/bin/java -version

openjdk version "23.0.1" 2024-10-15
OpenJDK Runtime Environment Zulu23.30+13-CA (build 23.0.1+11)
OpenJDK 64-Bit Server VM Zulu23.30+13-CA (build 23.0.1+11, mixed mode)
=>Sigfault/Segbus while quitting, exiting silently
```

Added `break 0x5` to debug:
```
Thread 1 "java" received signal SIGTRAP, Trace/breakpoint trap.
my_box64signalhandler (sig=<optimized out>, info=0xffffff53a8, ucntx=0xffffff5430) at /home/zhaixiang/repo/box64/src/libtools/signals.c:1406
1406            __asm__ __volatile__ ("break 0x5\n");
(gdb) bt
#0  my_box64signalhandler (sig=<optimized out>, info=0xffffff53a8, ucntx=0xffffff5430) at /home/zhaixiang/repo/box64/src/libtools/signals.c:1406
#1  <signal handler called>
#2  0x000000ffb3683d24 in ?? ()
#3  0x00000000350554b8 in la64_next () at /home/zhaixiang/repo/box64/src/dynarec/la64/la64_next.S:34
(gdb) x/22i 0x000000ffb3683d24-44
...
   0xffb3683d10:    dbar    0x14
   0xffb3683d14:    lu12i.w    $r6,2(0x2)
   0xffb3683d18:    ori    $r6,$r6,0x3b4
   0xffb3683d1c:    add.d    $r6,$r6,$r20
   0xffb3683d20:    addi.d    $r7,$r0,1(0x1)
=>   0xffb3683d24:    st.b    $r7,$r6,0
   0xffb3683d28:    ld.d    $r17,$r16,0
   0xffb3683d2c:    addi.d    $r16,$r16,8(0x8)
   0xffb3683d30:    ld.d    $r20,$r16,0
   0xffb3683d34:    addi.d    $r16,$r16,8(0x8)
   0xffb3683d38:    addi.d    $r5,$r20,0
...
```

src/dynarec/la64/la64_next.S:34
```
la64_next:
    // emu is a0
    // IP address is a1
    addi.d $sp, $sp, -(8 * 12) 
...
    st.d   $r20, $sp, 88 // also save r20(rip) to allow change in LinkNext

    move   $a2, $ra      // "from" is in ra, so put in a2
    addi.d $a3, $sp, 88  // a3 is address to change rip
    // call the function
=>    bl LinkNext
...
```
LinkNext -> DBGetBlock -> internalDBGetBlock.

java -version works just reverted the commit https://github.com/ptitSeb/box64/commit/3ed1e565f8e494070c070d7d3742efc89c41c741

Thanks,
Leslie Zhai