Some issues with box64 dynarec
First off I want to say that this project is amazing, thank you for your effort.

I have been experiencing some issues while running box64 in a proot (Ubuntu 22.04 inside Termux using a Pixel 6 with a Google Tensor SoC) and I was wondering if some sort of fix or workaround could be implemented? I also want to add that I am not experienced with emulation so I do not know what is happening here.

From what I understand, it is not a box64 issue but an issue with proot as the binary works with box64 on a Nintendo switch running Ubuntu "natively". The confusing part is that it works with FEX on the same setup as shown below.

This happens with both Dynarec on and off (the libproviders.so library isn't an issue as even with it working the software crashes). Box64:
```
root@localhost:~/ProjectExabyte# box64 ./ProjectExabyte-linux
Dynarec for ARM64, with extension: ASIMD AES CRC32 PMULL ATOMICS PageSize:4096
Box64 with Dynarec v0.1.9 1ff0a7c built on Jul 25 2022 01:49:57
Using default BOX64_LD_LIBRARY_PATH: ./:lib/:lib64/:x86_64/:bin64/:libs64/
Using default BOX64_PATH: ./:bin/
Counted 30 Env var
Looking for ./ProjectExabyte-linux
Rename process to "ProjectExabyte-linux"
Using native(wrapped) libdl.so.2
Using native(wrapped) libc.so.6
Using native(wrapped) ld-linux-x86-64.so.2
Using native(wrapped) libpthread.so.0
Using native(wrapped) librt.so.1
Using emulated /usr/lib/x86_64-linux-gnu/libstdc++.so.6
Using native(wrapped) libm.so.6
Using emulated /usr/lib/x86_64-linux-gnu/libgcc_s.so.1
Warning, CALL to 0x0 at 0x16dd403 (0x16dd402)
Error loading needed lib libproviders.so
Warning: Cannot dlopen("libproviders.so"/0x7e9fa99570, 2)
proot error: POKEDATA workaround stub got signal 11
proot warning: ptrace(POKEDATA): Bad address
node:internal/fs/utils:345
    throw err;
    ^

Error: EFAULT: bad address in system call argument, stat '/root/ProjectExabyte/ProjectExabyte-linux'
    at Object.statSync (node:fs:1551:3)
    at pkg/prelude/bootstrap.js:96:21
    at pkg/prelude/bootstrap.js:2259:3
    at readPrelude (node:internal/bootstrap/pkg:31:12)
    at node:internal/bootstrap/pkg:36:18
    at node:internal/bootstrap/pkg:43:4
    at node:internal/bootstrap/pkg:44:2 {
  errno: -14,
  syscall: 'stat',
  code: 'EFAULT',
  path: '/root/ProjectExabyte/ProjectExabyte-linux'
}
```

FEX:
```
root@localhost:~/ProjectExabyte# FEXInterpreter ./ProjectExabyte-linux
[MISC] mainBot init complete successfully!
```
The app goes on to work mostly normally with FEX albeit very slowly. It is a private binary made by me however I would be happy to create a fully open source binary that replicates the issue if needed (it is an app written in Node.js and packaged into an executable with https://github.com/vercel/pkg).

If you need more information then please feel free to ask. This is mostly for fun and to see what emulation can do, this isn't really that important as running inside a proot is not a common use case.

EDIT: Sorry for the bad formatting, I wrote this on my phone.