QEMU PPC SYSTEM regression - 3.1.0 and GIT - Fail to boot AIX

Built from source on a debian system

Linux db08 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux
gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1)

Last git commit (from queued gdibson repository)

starting AIX 7.2 TL 2 SP 2 with the following : (the install was done under qemu 3.1.0)

qemu-system-ppc64 -M pseries \
    -cpu power7 \
    -cdrom AIX_v7.2_Install_7200-02-02-1806_DVD_1_of_2_32018.iso \
    -net nic \
    -net tap,ifname=tap2,script=no \
    -drive file=DISK1.IMG,if=none,id=drive-virtio-disk0 \
    -device virtio-scsi-pci,id=scsi -device scsi-hd,drive=drive-virtio-disk0 \
    -m 4G \
    -serial stdio \
    -monitor unix:ms,server,nowait \
    -accel tcg \
    -k fr \
    -nographic \
    -prom-env input-device=/vdevice/vty@71000000 \
    -prom-env output-device=/vdevice/vty@71000000 \
    -prom-env diag-switch?=false \
    -prom-env boot-command="boot /pci@800000020000000/scsi@2/disk@100000000000000 -s verbose"

Yields this :


^M
SLOF^[[0m^[[?25l **********************************************************************^M
^[[1mQEMU Starting^M
^[[0m Build Date = Jan 14 2019 18:00:39^M
 FW Version = git-a5b428e1c1eae703^M
 Press "s" to enter Open Firmware.^M^M
^M^M
^[[0m^[[?25hC0000^MC0100^MC0120^MC0140^MC0200^MC0240^MC0260^MC02E0^MC0300^MC0320^MC0340^MC0360^MC0370^MC0380^MC0371^MC0372^MC0373^MC0374^MC03F0^MC0400^MC0480^MC04C0^MC04D0^MC0500^MPopulating /vdevice methods^M
Populating /vdevice/vty@71000000^M
Populating /vdevice/nvram@71000001^M
Populating /vdevice/l-lan@71000002^M
Populating /vdevice/v-scsi@71000003^M
       SCSI: Looking for devices^M
          8200000000000000 CD-ROM   : "QEMU     QEMU CD-ROM      2.5+"^M
C05A0^MPopulating /pci@800000020000000^M
                     00 0000 (D) : 1234 1111    qemu vga^M
                     00 0800 (D) : 1033 0194    serial bus [ usb-xhci ]^M
                     00 1000 (D) : 1af4 1004    virtio [ scsi ]^M
Populating /pci@800000020000000/scsi@2^M
       SCSI: Looking for devices^M
          100000000000000 DISK     : "QEMU     QEMU HARDDISK    2.5+"^M
C0600^MC06C0^MC0700^MC0800^MC0880^MC0890^MC08A0^MC08A8^MInstalling QEMU fb^M
^M
^M
^M
C08B0^MScanning USB ^M
  XHCI: Initializing^M
    USB Keyboard ^M
    USB mouse ^M
C08C0^MC08D0^MNo console specified using screen & keyboard^M
User selected input-device console: /vdevice/vty@71000000^M
User selected output-device console: /vdevice/vty@71000000^M
C08E0^MC08E8^MC08FF^M     ^M
  Welcome to Open Firmware^M
^M
  Copyright (c) 2004, 2017 IBM Corporation All rights reserved.^M
  This program and the accompanying materials are made available^M
  under the terms of the BSD License available at^M
  http://www.opensource.org/licenses/bsd-license.php^M
^M
^M
Trying to load: -s verbose from: /pci@800000020000000/scsi@2/disk@100000000000000 ...   Successfully loaded^M
^M
                        ---> qemu,pseries detected <---^M
^M
^M
^M
^M
^M
^M
^M
-------------------------------------------------------------------------------^M
                                Welcome to AIX.^M
                   boot image timestamp: 05:56:13 04/20/2019^M
        processor count: 1;  memory size: 4096MB;  kernel size: 38426884^M
         boot device: /pci@800000020000000/scsi@2/disk@100000000000000^M
^M
8000FFEC bytes of free memory remain at address 7FFF0014^M
load address: 0x00004000   aixmon size: 0x000D2C00   boot image size: 0x01A6B430^M
^LAIX vm,uuid property contains invalid data^Mload address: 0x00004000   aixmon size: 0x000D2C00   boot image size: 0x01A6B430^M
^LAIX vm,uuid property contains invalid data^M
get_ppp return code: 0xFFFFFFFE^M
^M
AKVM: hcall-multi-tce detected but overridden, allow with "multce" boot argument^M
The temporary memory region list is at 1 percent capacity.^M
The temporary IPLCB is at 1 percent capacity.^M
The IPLCB address is 0x0FFF9000^M
name                 offset           size^M
ipl_cb_and_bit_map 00000000 ......00005958^M
bit_map........... 00000790 ......00000006^M
ipl_info.......... 000001C8 ......00000024^M
splpar_info....... 000001EC ......00000048^M
system_info....... 00000234 ......000000C4^M
processor_info.... 000002F8 ......00000148^M
lpar_id_info...... 00000440 ......00000088^M
dr_proc_info...... 000004C8 ......00000008^M
dr_mem_info....... 000004D0 ......00000028^M
lpar_info......... 000004F8 ......00000014^M
segment page...... 00000518 ......00000028^M
processor page.... 00000540 ......00000010^M
res_asso_id....... 00000550 ......00000050^M
res_asso_group.... 000005A0 ......00000048^M
asso_ref_pnt...... 000005E8 ......00000010^M
residual.......... 00000820 ......00005138^M
fwad_info......... 000005F8 ......00000040^M
contig mem rsv.... 00000738 ......00000058^M
    region address      region length       attr  label^M
0   0x0000000000000000  0x000000000FFF7000  0x01  0x01^M
1   0x000000000FFF7000  0x0000000000002000  0x01  0x03^M
2   0x000000000FFF9000  0x0000000000006000  0x01  0x02^M
3   0x000000000FFFF000  0x0000000000000014  0x00  0x05^M
4   0x000000000FFFF014  0x00000000F0000FEC  0x01  0x01^M
5   0x0000000100000000  0xFFFFFFFF00000000  0x00  0x07^M
----------------------------^M
^M
0000012C bytes of free memory remain at address 00004000^M
compressed kernel addr: D6C00;  sz: 98CE33;  uncompressed kernel addr:  1DB59600^M
         name     source       dest       size   flags^M
 0      .data   1e6f9840    2000000    12bdd20     1^M
 1    basecfg    1b04000    fff5000       15d9     1^M
 2      ramfs     a63a30    efe9000    100b82a     1^M
 3      .text   1db59840      d6c00     ba0000     1^M
 4       .ldr   1f9b7560     c77000      a9523     1^M
 5     symtab   1fe0aaf4     d21000     1f4410     1^M
 6  kern. hdr   1db59600          0        240     1^M
 7       .bss          0    32bdd20    27222e0     2^M
free space between BSS and RAM filesystem: 09609000^M
^M
entry_point: 0x000D6C28^M
                       kernel debugger setting: enabled^M
-------------------------------------------------------------------------------^M
^LStarLED{A20}^M
Data Storage Interrupt - PROC^M
.dispatch+000098              lwz    r0,1830(r6)         r0=0,1830(r6)=F00000002FF48E30^M
KDB(0)>

(apologies for all the ^M - they are emitted by qemu or AIX - not sure)

Using the same command to boot AIX from 3.1.0 works (no DSI Interrupt). - Other problems occur later, but no Kernel interrupt, only user space problems - and that's another problem - but one at a time !

--Ivan

Forgot that part (debugger output)
KDB(0)> wherre^H ^H^H ^He^M
si_pvthread+000000 STACK:^M
[0008F418]dispatch+000098 (0000000003380000, 0000000002DC3838,^M
   F1000816B0036CF0 [??])^M
[00234E34]flih_util+000440 ()^M
____ Exception (02743408) ____^M
iar   : 0000000000AD0088  msr   : 8000000000001032  cr    : 22000888^M
lr    : 0000000000AD0078  ctr   : 0000000000000000  xer   : 00000010^M
mq    : 00000000  ^M
r0  : 00000000000000C0  r1  : 0000000002E22280  r2  : 00000000032B5D20^M
r3  : 0000000000000A00  r4  : F10008008012BFF8  r5  : 0000000000000000^M
r6  : F200800011400010  r7  : 0000000000004002  r8  : 0000000000000A00^M
r9  : 0000000000000404  r10 : 0000000000000000  r11 : 0000000000000000^M
r12 : 0000000000AD0078  r13 : 00000000025933F0  r14 : 0000000000B9D470^M
r15 : F10008008012C000  r16 : F20080001143C000  r17 : 000000000003C000^M
r18 : 0000000002004324  r19 : F200800011400006  r20 : 0000000000000000^M
r21 : 0000000000000000  r22 : 0000000002004338  r23 : 0000000000000000^M
r24 : 0000000000000A00  r25 : 0000000000000002  r26 : 0000000000000E3F^M
r27 : 0000000000000001  r28 : 0000000000004002  r29 : 0000000000000000^M
r30 : 0000000000000A00  r31 : F200800011400000  ^M
^M
prev      0000000000000000 stackfix  0000000000000000 int_ticks 0000 ^M
cfar      0000000000163154 capi      0^M
(0)> more (^C to quit) ? ^H ^H^G^M
^M                               ^Mkjmpbuf   0000000000000000 excbranch 0000000000000000 no_pfault 00 ^M
intpri    00               backt     00               flags     00 ^M
hw_fru_id 00000000         hw_cpu_id 00000000^M
fpscr     0000000000000000 fpscrx    00000000         fpowner   00 ^M
fpeu      00               fpinfo    00               alloc     F000 ^M
tmstate   00               tmcontext 00               prevowner 00 ^M
o_iar     0000000000000000 o_toc     0000000000000000 ^M
o_arg1    0000000000000000 o_vaddr   0000000000000000 ^M
krlockp   0000000000000000 rmgrwa    0000000000000000 ^M
amrstackhigh  00000000054B22B8 amrstacklow   00000000054B21B8 ^M
amrstackcur   00000000054B22B8 amrstackfix   0000000000000000 ^M
kstackhigh    0000000000000000 kstacksize    00000000 ^M
frrstart  700DFEED00000000 frrend    700DFEED00000000 ^M
frrcur    700DFEED00000000 frrstatic 0000 kjmpfrroff 0000 ^M
frrovcnt  0000 frrbarrcnt 0000 frrmask 00 callrmgr 00 ^M
Except :^M
excp_type 00000106  EXCEPT_DSI ^M
 orgea F10008008012C000 dsisr 0000000040000000  bit set: DSISR_PFT^M
 vmh   0000000018008400 curea F10008008012C000 pftyp 0000000000000106^M
[00AD0088]IPRA.$initxpt+0001A8 (0000000000000A00, F10008008012BFF8,^M
   0000000000000000 [??])^M
[00AD02E4]IPRA.$initxpt_vmsi+0000C4 ()^M
(0)> more (^C to quit) ? ^H ^H^G^M
^M                               ^M[00ACBB08]vmsi+000968 ()^M
[00AC0DF8]main+000098 ()^M
[0053A748].start1+0000B8 ()^M


Currently at :
QEMU emulator version 4.0.50 (v2.8.0-rc0-19525-ga4f667b671-dirty)
Copyright (c) 2003-2019 Fabrice Bellard and the QEMU Project developers


Got gdb for ppc64 to work and connect to qemu... Here is what I am getting when doing a "info all-registers"

r0             0x0      0
r1             0xf1000816b0036890       17365889056675948688
r2             0x32b5d20        53173536
r3             0x3380000        54001664
r4             0x2dc3838        47986744
r5             0xf1000816b0036cf0       17365889056675949808
r6             0xf00000002ff47600       17293822569907254784
r7             0x1007   4103
r8             0x1000   4096
r9             0x0      0
r10            0x0      0
r11            0x424d2061       1112350817
r12            0x3282600        52962816
r13            0x25933f0        39400432
r14            0x2743408        41169928
r15            0x3380000        54001664
r16            0xf1000816b0036d00       17365889056675949824
r17            0x36000  221184
r18            0x2004324        33571620
r19            0xf10008008012c000       17365888961382367232
r20            0xf10008008      64692977672
r21            0x0      0
r22            0x2dc3708        47986440
r23            0xf10008008012bff8       17365888961382367224
r24            0x0      0
r25            0x34e0   13536
r26            0x0      0
r27            0x1      1
r28            0x0      0
r29            0x2743408        41169928
r30            0x2079498        34051224
r31            0x25933f0        39400432
f0             0        (raw 0x0000000000000000)
f1             0        (raw 0x0000000000000000)
f2             0        (raw 0x0000000000000000)
f3             0        (raw 0x0000000000000000)
f4             0        (raw 0x0000000000000000)
f5             0        (raw 0x0000000000000000)
f6             0        (raw 0x0000000000000000)
f7             0        (raw 0x0000000000000000)
f8             0        (raw 0x0000000000000000)
f9             0        (raw 0x0000000000000000)
f10            0        (raw 0x0000000000000000)
f11            0        (raw 0x0000000000000000)
f12            0        (raw 0x0000000000000000)
f13            0        (raw 0x0000000000000000)
f14            0        (raw 0x0000000000000000)
f15            0        (raw 0x0000000000000000)
f16            0        (raw 0x0000000000000000)
f17            0        (raw 0x0000000000000000)
f18            0        (raw 0x0000000000000000)
f19            0        (raw 0x0000000000000000)
f20            0        (raw 0x0000000000000000)
f21            0        (raw 0x0000000000000000)
f22            0        (raw 0x0000000000000000)
f23            0        (raw 0x0000000000000000)
f24            0        (raw 0x0000000000000000)
f25            0        (raw 0x0000000000000000)
f26            0        (raw 0x0000000000000000)
f27            0        (raw 0x0000000000000000)
f28            0        (raw 0x0000000000000000)
f29            0        (raw 0x0000000000000000)
f30            0        (raw 0x0000000000000000)
f31            0        (raw 0x0000000000000000)
pc             0x8f418  0x8f418
msr            0x8000000000001032       9223372036854779954
cr             0x22422280       574759552
lr             0x234e38 0x234e38
ctr            0x256b20 2452256
xer            0x10     16
fpscr          0x0      0
vr0            {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr1            {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr2            {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr3            {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr4            {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr5            {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr6            {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr7            {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr8            {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr9            {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr10           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr11           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr12           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr13           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr14           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr15           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr16           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr17           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr18           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr19           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr20           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr21           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr22           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr23           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr24           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr25           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr26           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr27           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr28           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr29           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr30           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vr31           {uint128 = 0x00000000000000000000000000000000, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}}
vscr           0x10000  65536
vrsave         0x0      0
xer            0x0      0
lr             0x0      0
ctr            0x0      0
uamr           0x0      0
spr_dscr       0x0      0
dsisr          0x40000000       1073741824
dar            0xf10008008012c000       -1080855112327184384
decr           0x0      0
srr0           0xad0088 11337864
srr1           0x8000000000001032       -9223372036854771662
spr_cfar       0x0      0
amr            0x0      0
acop           0x0      0
pid            0x0      0
iamr           0x0      0
tfhar          0x0      0
tfiar          0x0      0
texasr         0x0      0
texasru        0x0      0
spr_uctrl      0x0      0
tidr           0x0      0
spr_ctrl       0x1      1
fscr           0x0      0
uamor          0x0      0
pspb           0x0      0
dawr           0x0      0
rpr            0x103070f1f3f    1112514961215
ciabr          0x0      0
dawrx          0x0      0
hfscr          0x0      0
vrsave         0x0      0
usprg3         0x0      0
tbl            0x0      0
tbu            0x0      0
sprg0          0x3380000        54001664
sprg1          0xf1000816b0036d00       -1080855017033601792
sprg2          0x2e22280        48374400
sprg3          0x100000000      4294967296
ear            0x0      0
tbl            0x0      0
tbu            0x0      0
pvr            0x4e1200 5116416
hsprg0         0x0      0
hsprg1         0x0      0
hdsisr         0x0      0
hdar           0x0      0
spurr          0x0      0
purr           0x0      0
hdec           0x0      0
rmor           0x0      0
hrmor          0x0      0
hsrr0          0x0      0
hsrr1          0x0      0
mmcrh          0x0      0
tfmr           0x0      0
lpcr           0x403f008        67366920
lpidr          0x0      0
hmer           0x0      0
hmeer          0x0      0
pcr            0x0      0
amor           0xffffffffffffffff       -1
tir            0x0      0
ptcr           0x0      0
usier          0x0      0
ummcr2         0x0      0
ummcra         0x0      0
upmc1          0x0      0
upmc2          0x0      0
upmc3          0x0      0
upmc4          0x0      0
upmc5          0x0      0
upmc6          0x0      0
ummcr0         0x0      0
usiar          0x0      0
usdar          0x0      0
ummcr1         0x0      0
sier           0x0      0
mmcr2          0x0      0
mmcra          0x0      0
pmc1           0x0      0
pmc2           0x0      0
pmc3           0x0      0
pmc4           0x0      0
pmc5           0x0      0
pmc6           0x0      0
mmcr0          0x0      0
siar           0x0      0
sdar           0x0      0
mmcr1          0x0      0
bescrs         0x0      0
bescrsu        0x0      0
bescrr         0x0      0
bescrru        0x0      0
ebbhr          0x0      0
ebbrr          0x0      0
bescr          0x0      0
tar            0x0      0
ic             0x0      0
vtb            0x0      0
mmcrc          0x0      0
psscr          0x0      0
tacr           0x0      0
tcscr          0x0      0
csigr          0x0      0
spmc1          0x0      0
spmc2          0x0      0
mmcrs          0x0      0
wort           0x0      0
ppr            0x0      0
tscr           0x0      0
hid0           0x0      0
pir            0x0      0
dl0            0E-6176  (raw 0x00000000000000000000000000000000)
dl1            0E-6176  (raw 0x00000000000000000000000000000000)
dl2            0E-6176  (raw 0x00000000000000000000000000000000)
dl3            0E-6176  (raw 0x00000000000000000000000000000000)
dl4            0E-6176  (raw 0x00000000000000000000000000000000)
dl5            0E-6176  (raw 0x00000000000000000000000000000000)
dl6            0E-6176  (raw 0x00000000000000000000000000000000)
dl7            0E-6176  (raw 0x00000000000000000000000000000000)
dl8            0E-6176  (raw 0x00000000000000000000000000000000)
dl9            0E-6176  (raw 0x00000000000000000000000000000000)
dl10           0E-6176  (raw 0x00000000000000000000000000000000)
dl11           0E-6176  (raw 0x00000000000000000000000000000000)
dl12           0E-6176  (raw 0x00000000000000000000000000000000)
dl13           0E-6176  (raw 0x00000000000000000000000000000000)
dl14           0E-6176  (raw 0x00000000000000000000000000000000)
dl15           0E-6176  (raw 0x00000000000000000000000000000000)
vs0            {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs1            {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs2            {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs3            {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs4            {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs5            {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs6            {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs7            {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int1
    0x0 <repeats 16 times>}}
vs8            {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs9            {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs10           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs11           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs12           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs13           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs14           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs15           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs16           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs17           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs18           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs19           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs20           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs21           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs22           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs23           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs24           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs25           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs26           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs27           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs28           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs29           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs30           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs31           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs32           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs33           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs34           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs35           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs36           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs37           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs38           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs39           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs40           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs41           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs42           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs43           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs44           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs45           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs46           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs47           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs48           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs49           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs50           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs51           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs52           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs53           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs54           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs55           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs56           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs57           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs58           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs59           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs60           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs61           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs62           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
vs63           {uint128 = 0x00000000000000000000000000000000, v2_double = {0x0, 0x0}, v4_float = {0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v16_int8 = {
    0x0 <repeats 16 times>}}
f32            0        (raw 0x0000000000000000)
f33            0        (raw 0x0000000000000000)
f34            0        (raw 0x0000000000000000)
f35            0        (raw 0x0000000000000000)
f36            0        (raw 0x0000000000000000)
f37            0        (raw 0x0000000000000000)
f38            0        (raw 0x0000000000000000)
f39            0        (raw 0x0000000000000000)
f40            0        (raw 0x0000000000000000)
f41            0        (raw 0x0000000000000000)
f42            0        (raw 0x0000000000000000)
f43            0        (raw 0x0000000000000000)
f44            0        (raw 0x0000000000000000)
f45            0        (raw 0x0000000000000000)
f46            0        (raw 0x0000000000000000)
f47            0        (raw 0x0000000000000000)
f48            0        (raw 0x0000000000000000)
f49            0        (raw 0x0000000000000000)
f50            0        (raw 0x0000000000000000)
f51            0        (raw 0x0000000000000000)
f52            0        (raw 0x0000000000000000)
f53            0        (raw 0x0000000000000000)
f54            0        (raw 0x0000000000000000)
f55            0        (raw 0x0000000000000000)
f56            0        (raw 0x0000000000000000)
f57            0        (raw 0x0000000000000000)
f58            0        (raw 0x0000000000000000)
f59            0        (raw 0x0000000000000000)
f60            0        (raw 0x0000000000000000)
f61            0        (raw 0x0000000000000000)
f62            0        (raw 0x0000000000000000)
f63            0        (raw 0x0000000000000000)

(gdb) where
#0  0x000000000008f418 in ?? ()
#1  0x0000000000234e38 in ?? ()
#2  0x0000000000234e38 in ?? ()
(gdb) x 0x000000000008f418
0x8f418:        0x80061830
(gdb) x/i 0x000000000008f418
=> 0x8f418:     lwz     r0,6192(r6)
(gdb)
(gdb) x 0xf00000002ff47600
0xf00000002ff47600:     Cannot access memory at address 0xf00000002ff47600
(gdb)
(gdb) x 0xf00000002ff48e30 (r6+0x1830)
   0xf00000002ff48e30:  Cannot access memory at address 0xf00000002ff48e30
(gdb)

*************************

Note again, this works under 3.1.0

--Ivan

From qemu monitor :
(qemu) info tlb
info tlb
SLB     ESID                    VSID
0       0x0000000008000000      0x0000000004002400
3       0xf100050008000000      0x4000005000000400
4       0xf100100008000000      0x4000010000000400
5       0xf100080008000000      0x4000008000000400
6       0xf100010008000000      0x4000001000000400
7       0xf200800008000000      0x4000810000000400
11      0xfffff00000000000      0x0000000012001080
(qemu) info registers
info registers
NIP 000000000008f418   LR 0000000000234e38 CTR 0000000000256b20 XER 0000000020040010 CPU#0
MSR 8000000000001032 HID0 0000000000000000  HF 8000000000000030 iidx 1 didx 1
TB 00000002 11869414363 DECR 1608999296
GPR00 0000000000000000 f1000816b0036890 00000000032b5d20 0000000003380000
GPR04 0000000002dc3838 f1000816b0036cf0 f00000002ff47600 0000000000001007
GPR08 0000000000001000 0000000000000000 0000000000000000 00000000424d2061
GPR12 0000000003282600 00000000025933f0 0000000002743408 0000000003380000
GPR16 f1000816b0036d00 0000000000036000 0000000002004324 f10008008012c000
GPR20 0000000f10008008 0000000000000000 0000000002dc3708 f10008008012bff8
GPR24 0000000000000000 00000000000034e0 0000000000000000 0000000000000001
GPR28 0000000000000000 0000000002743408 0000000002079498 00000000025933f0
CR 22422280  [ E  E  G  E  E  E  L  -  ]             RES ffffffffffffffff
FPR00 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR04 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR08 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR12 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR16 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR20 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR24 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR28 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPSCR 0000000000000000
 SRR0 0000000000ad0088  SRR1 8000000000001032    PVR 00000000004e1200 VRSAVE 0000000000000000
SPRG0 0000000003380000 SPRG1 f1000816b0036d00  SPRG2 0000000002e22280  SPRG3 0000000100000000
SPRG4 0000000000000000 SPRG5 0000000000000000  SPRG6 0000000000000000  SPRG7 0000000000000000
HSRR0 0000000000000000 HSRR1 0000000000000000
 CFAR 0000000000234e34
 LPCR 000000000403f008
 PTCR 0000000000000000   DAR f10008008012c000  DSISR 0000000040000000


This is the result at the same breakpoint under 3.1.0 (note the difference in the TLB) (notably Segment Lookaside Buffer entry #1)

(qemu) info tlb
info tlb
SLB     ESID                    VSID
0       0x0000000008000000      0x0000000004002400
1       0xf000000028000000      0x0000000802001080
3       0xf100050008000000      0x4000005000000400
4       0xf100100008000000      0x4000010000000400
5       0xf100080008000000      0x4000008000000400
6       0xf100010008000000      0x4000001000000400
7       0xf200800008000000      0x4000810000000400
11      0xfffff00000000000      0x000000001a3e5080
12      0xfffff10000000000      0x0000000824012080
13      0xfffff20000000000      0x0000000806003080
19      0x0ffffffff8000000      0x0000000804002c80
20      0xf100060008000000      0x4000006000000400
21      0xf100000008000000      0x4000000000000400
(qemu) info registers
info registers
NIP 000000000008f418   LR 0000000000234e38 CTR 0000000000256b20 XER 0000000020040008 CPU#0
MSR 8000000000001032 HID0 0000000000000000  HF 8000000000000030 iidx 1 didx 1
TB 00000003 14758239312 DECR 02912440
GPR00 0000000000000000 f1000816b0036890 00000000032b5d20 0000000003380000
GPR04 f100100a00000000 f1000816b0036cf0 f00000002ff47600 0000000000000017
GPR08 0000000000001000 0000000000000000 0000000000000000 0000000000000000
GPR12 f1000117d7fad000 f1000117d7faf800 f00000002ff47600 0000000003380000
GPR16 f1000816b0036d00 0000000002004018 000000000000003d f1000800802de000
GPR20 0000000f10008008 0000000000000000 f100100a10000000 0000000000000800
GPR24 0000000000000000 00000000000034e0 f1000117d7faf000 0000000000000001
GPR28 0000000000000000 f00000002ff47600 f1000117d7fb0800 f1000117d7faf800
CR 22022480  [ E  E  -  E  E  G  L  -  ]             RES ffffffffffffffff
FPR00 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR04 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR08 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR12 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR16 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR20 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR24 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPR28 0000000000000000 0000000000000000 0000000000000000 0000000000000000
FPSCR 0000000000000000
 SRR0 000000000031dec4  SRR1 8000000000009032    PVR 00000000004e1200 VRSAVE 0000000000000000
SPRG0 0000000003380000 SPRG1 f1000816b0036d00  SPRG2 0000000003380ce8  SPRG3 0000000100000000
SPRG4 0000000000000000 SPRG5 0000000000000000  SPRG6 0000000000000000  SPRG7 0000000000000000
HSRR0 0000000000000000 HSRR1 0000000000000000
 CFAR 0000000000234e34
 LPCR 000000000001f008
 PTCR 0000000000000000   DAR f1000800802de000  DSISR 0000000042000000


It might be a red herring... 

The AIX Boot procedure under 3.1.0 issues a

LED{814}

which it doesn't issue under 4.0.50 (so a different path is taken at some point by the AIX kernel)

First I need to determine what AIX code 814 stands for (but it could be auxiliary)

Before going into the ".dispatch+98" (0x8f418) - so something else must be different between 3.1.0 and 4.0.50...

I'm probably going to have to "git bisect" this, but that's not going to be easy (the build in itself takes quite a while, although I could optimize it to just include the ppc64 TCG version).

Apologies for anyone receiving notifications for this, but I'd really like this to work !

According to git bisect :

 git bisect bad
c24ba3d0a34f68ad2c6bf1a15bc43770005f6cc0 is the first bad commit
commit c24ba3d0a34f68ad2c6bf1a15bc43770005f6cc0
Author: Laurent Vivier <email address hidden>
Date:   Wed Dec 19 17:35:41 2018 +0100

    spapr: Add H-Call H_HOME_NODE_ASSOCIATIVITY

    H_HOME_NODE_ASSOCIATIVITY H-Call returns the associativity domain
    designation associated with the identifier input parameter

    This fixes a crash when we try to hotplug a CPU in memory-less and
    CPU-less numa node. In this case, the kernel tries to online the
    node, but without the information provided by this h-call, the node id,
    it cannot and the CPU is started while the node is not onlined.

    It also removes the warning message from the kernel:
      VPHN is not supported. Disabling polling..

    Signed-off-by: Laurent Vivier <email address hidden>
    Reviewed-by: Greg Kurz <email address hidden>
    Signed-off-by: David Gibson <email address hidden>

:040000 040000 97fe7c5db103c5426f25f2741db918e8cbc03b75 ed55cf6abd483aa01974c18d613461cc9e80e2c3 M      hw
:040000 040000 4d51166be64bc71a72bd60eaa412aadc2117fc4c 614be9f9c87d20f7a2c23921a37d771a8956ee7c M      include


For info :

I tried Removing the SPAPR H_HOME_NODE_ASSOCIATIVITY H-call support (Not saying it shouldn't be implemented for CPU hotplug support) and AIX 7.2 boots again. with the latest QEMU (as of 8c1ecb590497b0349c550607db923972b37f6963 - git pulled 2019/05/29 @ around 06H30 GMT)

There must be a very subtle error in how this H-Call works that is bothering AIX... (My setup is single node)

--Ivan

I tried removing the H_HOME_NODE_ASSOCIATIVITY H-call from QEMU 4.2.0 and git 5.0.50v5.0.0-997-g9e7f1469b9-dirty, but AIX 7.2 TL4 SP1 still won't boot for me. The last version of QEMU I got it to boot up completely in was 2.11.2 (the version I was able to install AIX).

ERROR:/home/kens/tmp/qemu/cpus.c:1735:qemu_tcg_cpu_thread_fn: assertion failed: (cpu->halted)

If I disable SMP (single CPU) and switch to POWER7, it boots until IPL progress code 00c9/00c0 (dump) then it reboots. I had POWER9 SMP = 8 working with 2.11.2.

I'm no longer working at IBM.


The QEMU project is currently moving its bug tracking to another system.
For this we need to know which bugs are still valid and which could be
closed already. Thus we are setting the bug state to "Incomplete" now.

If the bug has already been fixed in the latest upstream version of QEMU,
then please close this ticket as "Fix released".

If it is not fixed yet and you think that this bug report here is still
valid, then you have two options:

1) If you already have an account on gitlab.com, please open a new ticket
for this problem in our new tracker here:

    https://gitlab.com/qemu-project/qemu/-/issues

and then close this ticket here on Launchpad (or let it expire auto-
matically after 60 days). Please mention the URL of this bug ticket on
Launchpad in the new ticket on GitLab.

2) If you don't have an account on gitlab.com and don't intend to get
one, but still would like to keep this ticket opened, then please switch
the state back to "New" or "Confirmed" within the next 60 days (other-
wise it will get closed as "Expired"). We will then eventually migrate
the ticket automatically to the new system (but you won't be the reporter
of the bug in the new system and thus you won't get notified on changes
anymore).

Thank you and sorry for the inconvenience.


We already have a different ticket to track the AIX 7.2 issue here:
 https://gitlab.com/qemu-project/qemu/-/issues/269
Please continue with the discussion there instead, thanks!

