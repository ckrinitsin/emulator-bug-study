id = 2687
title = "regression in qtest clock_set/clock_step"
state = "closed"
created_at = "2024-11-18T21:37:32.424Z"
closed_at = "2025-01-13T14:37:33.221Z"
labels = ["Regression"]
url = "https://gitlab.com/qemu-project/qemu/-/issues/2687"
host-os = "Ubunut 24.04"
host-arch = "x86_64"
qemu-version = "3428a3894c6fdf43bc07405090699b1de5013cfc"
guest-os = "N/A"
guest-arch = "x86_64"
description = """As of QEMU 9.0 the script included below would increment the time via qtest, but it is now broken and time doesn't seem to be updated. I do note that the QEMU sources use clock_step extensively via qtest_clock_step, but nothing seems to be using the return value so maybe that's why it hasn't been noticed?
 
It seems to have been broken in bc02be4508d8753d1f6071b77d10f4661587df6f which was trying to prevent some deadlock. You can prove that this breaks it by setting a breakpoint in `qemu_virtual_clock_set_ns` -- it never gets called."""
reproduce = """Run this python script from your QEMU build directory:

```python
#!/usr/bin/env python3

import subprocess
import socket
import typing

qemu_path = "./qemu-system-x86_64"


def main():
    s1, s2 = socket.socketpair()

    qemu = subprocess.Popen(
        [
            qemu_path,
            "-S",
            "-display",
            "none",
            "-chardev", f"socket,id=qtest,fd={s1.fileno()},nodelay=on",
            "-qtest", "chardev:qtest",
            "-qtest-log", "/dev/fd/2",
            "-accel", "qtest",
        ],
        pass_fds=[s1.fileno()],
    )

    try:

        fp = s2.makefile("rw", buffering=1)

        fp.write(f"clock_set 1234\\n")
        result = fp.readline()[:-1].split(" ")
        assert result == ["OK", "1234"], f"Unexpected result: {result}"
    finally:
        qemu.kill()


if __name__ == "__main__":
    main()
```"""
additional = "n/a"
