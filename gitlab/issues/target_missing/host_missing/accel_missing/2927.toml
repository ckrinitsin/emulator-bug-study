id = 2927
title = "Getting bare metal code running on tricore"
state = "opened"
created_at = "2025-04-20T16:06:22.036Z"
closed_at = "n/a"
labels = []
url = "https://gitlab.com/qemu-project/qemu/-/issues/2927"
host-os = "debian-12-bookworm-v20250113"
host-arch = "x86"
qemu-version = "EMU emulator version 9.2.50 (v9.2.0-1550-g04d3d0e9f5-dirty)"
guest-os = "bare metal"
guest-arch = "tricore"
description = """My code is stuck in"""
reproduce = """1. Open Infineon Aurix Development Studio (on Windows)
2. Compile project (two examples that I've tested)
a) New -> Project -> Board -> KIT_AURIX_TC277_TFT_DC-Step -> Build
b) the example from here: https://github.com/Infineon/AURIX_code_examples/tree/master/code_examples/Blinky_LED_1_KIT_TC277_TFT
3. Copy the elf and run qemu on the debian system"""
additional = """When running a blank binary on QEMU with the TriCore TC27x target, the CPU starts executing at address 0x80000020 and enters an infinite loop.
The code seems to be stuck and waiting for some hardware signal. The binary (sample.elf) from this issue qemu-project/qemu#1363 works. 

I know it's probably a rookie problem, but what am I missing? How can I get an example from Infineon running? Or any other example?

Please let me know if you need additional information!

```:~/qemu$ ./build/qemu-system-tricore   -M KIT_AURIX_TC277_TRB   -cpu tc27x   -nographic   -kernel ../qemu-examples/aurix_tricore_example_bins/Blank_project_TC277.elf -d in_asm
QEMU 9.2.50 monitor - type 'help' for more information
(qemu) ----------------
IN: _START
0x80000020:  
OBJD-T: 91000028d9220681dc02

----------------
IN: _Core0_start
0x80001206:  
OBJD-T: 9130002f192200469120003737026e21d92200468ff2838180321b026029602a
OBJD-T: 0d0080043b009820cd42e00f

----------------
IN: _Core0_start
0x8000120a:  
OBJD-T: 19220046

----------------
IN: _Core0_start
0x8000120e:  
OBJD-T: 9120003737026e21d92200468ff2838180321b026029602a0d0080043b009820
OBJD-T: cd42e00f

----------------
IN: _Core0_start
0x80001232:  
OBJD-T: 4d00e02fb7021420cd02e00f8212cd4220094dc0e12f8f720021012203260122
OBJD-T: 02265422542337026e218ff283216f134381

----------------
IN: _Core0_start
0x80001254:  
OBJD-T: 5422

----------------
IN: _Core0_start
0x80001256:  
OBJD-T: 542337026e218ff283216f134381

----------------
IN: _Core0_start
0x80001256:  
OBJD-T: 5423

----------------
IN: _Core0_start
0x80001258:  
OBJD-T: 37026e218ff283216f134381

----------------
IN: _Core0_start
0x80001264:  
OBJD-T: 8f2200305422b7021020a6328f224021742254226f02ffff

----------------
IN: _Core0_start
0x80001268:  
OBJD-T: 5422

----------------
IN: _Core0_start
0x8000126a:  
OBJD-T: b7021020a6328f224021742254226f02ffff

----------------
IN: _Core0_start
0x80001274:  
OBJD-T: 7422

----------------
IN: _Core0_start
0x80001276:  
OBJD-T: 54226f02ffff

----------------
IN: _Core0_start
0x80001276:  
OBJD-T: 5422

----------------
IN: _Core0_start
0x80001278:  
OBJD-T: 6f02ffff

----------------
IN: _Core0_start
0x8000127c:  
OBJD-T: 8202cdc2200954226f120900

----------------
IN: _Core0_start
0x80001282:  
OBJD-T: 5422

----------------
IN: _Core0_start
0x80001284:  
OBJD-T: 6f120900

----------------
IN: _Core0_start
0x80001296:  
OBJD-T: 5422b7021020a6328f324021742254226f02ff7f

----------------
IN: _Core0_start
0x80001296:  
OBJD-T: 5422

----------------
IN: _Core0_start
0x80001298:  
OBJD-T: b7021020a6328f324021742254226f02ff7f

----------------
IN: _Core0_start
0x800012a2:  
OBJD-T: 7422

----------------
IN: _Core0_start
0x800012a4:  
OBJD-T: 54226f02ff7f

----------------
IN: _Core0_start
0x800012a4:  
OBJD-T: 5422

----------------
IN: _Core0_start
0x800012a6:  
OBJD-T: 6f02ff7f


(qemu) q
```

When I run it with the `-d in_asm,cpu,exec` flag it logs this infinitely often:
```
Trace 0: 0x7fb5205e9940 [00000000/00000000800012a4/00000002/ff011001] _Core0_start
PC: 800012a4 PSW: 00000980 ICR: 00000000
PCXI: 00000000 FCX: 00000000 LCX: 00000000
GPR A00: 00000000 00000000 f0036100 70020000
GPR A04: 00000000 00000000 00000000 00000000
GPR A08: 00000000 00000000 70019600 00000000
GPR A12: 00000000 00000000 00000000 00000000
GPR D00: 00000000 00000000 00000000 000000fc
GPR D04: 00000000 00000000 00000000 00000000
GPR D08: 0000003f 00000000 00000000 00000000
GPR D12: 00000000 00000000 00000000 00000000
cpu_io_recompile: rewound execution of TB to 00000000800012a4
```"""
