CR4.VMX leaks from L1 into L2 on Intel VMX
Description of problem:
In a nested virtualization setting, `savevm` can cause CR4 bits from leaking from L1 into L2. This causes general-protection faults in certain guests.

The L2 guest executes this code:

```
mov rax, cr4  ; Get CR4​
mov rcx, rax  ; Remember the old value​
btc rax, 7    ; Toggle CR4.PGE​
mov cr4, rax  ; #GP! <- Shouldn't happen!​
mov cr4, rcx  ; Restore old value
```

If the guest code is interrupted at the right time (e.g. via `savevm`), Qemu marks CR4 dirty while the guest executes L2 code. Due to really complicated KVM semantics, this will result in L1 CR4 bits (VMXE) leaking into the L2 guest and the L2 will die with a GP:

Instead of the expected CR4 value, the L2 guest reads a value with VMXE set. When it tries to write this back into CR4, this triggers the general protection fault.
Steps to reproduce:
This is only an issue on **Intel** systems.

#
Additional information:
See also this discussion where we discussed a (flawed) approach to fixing this in KVM: https://lore.kernel.org/lkml/Zh6WlOB8CS-By3DQ@google.com/t/
